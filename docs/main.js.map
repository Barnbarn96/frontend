{"version":3,"sources":["./src/app/components/cart-details/cart-details.component.html","./src/app/components/cart-details/cart-details.component.ts","./src/app/common/order.ts","./src/environments/environment.ts","./src/app/common/purchase.ts","./src/app/components/members-page/members-page.component.ts","./src/app/components/members-page/members-page.component.html","./src/app/services/product.service.ts","./src/app/services/luv2-shop-form.service.ts","./src/app/common/payment-info.ts","./src/app/services/order-history.service.ts","./src/app/common/cart-item.ts","./src/app/components/checkout/checkout.component.ts","./src/app/components/checkout/checkout.component.html","./src/app/components/search/search.component.ts","./src/app/components/search/search.component.html","./src/app/services/checkout.service.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/common/product.ts","./src/app/components/login/login.component.ts","./src/app/components/login/login.component.html","./src/app/common/order-item.ts","./src/app/components/cart-status/cart-status.component.ts","./src/app/components/cart-status/cart-status.component.html","./src/app/app.module.ts","./src/app/components/product-category-menu/product-category-menu.component.html","./src/app/components/product-category-menu/product-category-menu.component.ts","./src/app/components/product-details/product-details.component.ts","./src/app/components/product-details/product-details.component.html","./src/app/components/product-list/product-list.component.ts","./src/app/components/product-list/product-list-grid.component.html","./src/app/services/cart.service.ts","./src/app/services/email.service.ts","./src/app/components/order-history/order-history.component.html","./src/app/components/order-history/order-history.component.ts","./src/app/config/my-app-config.ts","./src/app/services/auth-interceptor.service.ts","./src/app/common/email-info.ts","./src/app/components/login-status/login-status.component.html","./src/app/components/login-status/login-status.component.ts","./src/app/validators/luv2-shop-validators.ts","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAagB,qEAA4C;IACxC,qEAAI;IACA,qEAA2E;IAC/E,4DAAK;IACL,qEAAI;IACA,oEAAG;IAAA,uDAAuB;IAAA,4DAAI;IAC9B,oEAAG;IAAA,uDAA8C;;IAAA,4DAAI;IACzD,4DAAK;IACL,qEAAI;IACA,2EAAmB;IACf,yEAAO;IAAA,qEAAS;IAAA,4DAAQ;IAExB,2EAA4B;IACxB,2EAAiB;IACb,8EAAiF;IAAzE,6XAAyC;IAC7C,oEAA4B;IAChC,4DAAS;IACb,4DAAM;IAEN,2EAA2B;IACvB,wDACJ;IAAA,4DAAM;IAEN,2EAAiB;IACb,8EAAiF;IAAzE,6XAAyC;IAC7C,oEAA2B;IAC/B,4DAAS;IACb,4DAAM;IAEN,sEAAyB;IAC7B,4DAAM;IAEN,8EAA2E;IAAnE,kXAA8B;IAAsC,oEAAO;IAAA,4DAAS;IAChG,4DAAM;IAEN,yEAAgB;IAAA,wDAA+E;;IAAA,4DAAI;IACvG,4DAAK;IACT,4DAAK;;;IAnCQ,0DAAgC;IAAhC,iKAAgC;IAGlC,0DAAuB;IAAvB,qFAAuB;IACvB,0DAA8C;IAA9C,kKAA8C;IAcrC,2DACJ;IADI,oGACJ;IAcQ,0DAA+E;IAA/E,iNAA+E;;;IA5C3G,sEAAkC;IAElC,2EAAoC;IAChC,qEAAI;IACA,wEAAgB;IAAA,wEAAa;IAAA,4DAAK;IAClC,wEAAgB;IAAA,yEAAc;IAAA,4DAAK;IACnC,mEAAqB;IACzB,4DAAK;IAEL,sHAqCK;IAEL,qEAAI;IACA,qEAAqB;IACrB,0EAA8B;IAC9B,qEAAG;IAAA,wDAAiC;IAAA,4DAAI;IACxC,qEAAG;IAAA,8EAAkB;IAAA,4DAAI;IACzB,qEAAG;IAAA,wDAA6C;;IAAA,4DAAI;IACpD,4DAAK;IAET,4DAAK;IACL,sEAAI;IACA,qEAAqB;IACrB,yEAAmE;IAAA,oEAAQ;IAAA,4DAAI;IACnF,4DAAK;IAET,4DAAQ;IAER,4DAAM;;;IAvD2B,0DAAY;IAAZ,qFAAY;IA0ClC,0DAAiC;IAAjC,8GAAiC;IAEjC,0DAA6C;IAA7C,iLAA6C;;;IAcxD,0EAAuF;IACnF,yFACJ;IAAA,4DAAM;;AChEX,MAAM,oBAAoB;IAM/B,YAAoB,WAAwB;QAAxB,gBAAW,GAAX,WAAW,CAAa;QAJ5C,cAAS,GAAe,EAAE,CAAC;QAC3B,eAAU,GAAW,CAAC,CAAC;QACvB,kBAAa,GAAW,CAAC,CAAC;IAEsB,CAAC;IAEjD,QAAQ;QACN,IAAI,CAAC,eAAe,EAAE,CAAC;IACzB,CAAC;IACD,eAAe;QAEb,gCAAgC;QAChC,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC;QAE5C,kCAAkC;QAClC,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,SAAS,CACnC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,UAAU,GAAG,IAAI,CAC/B,CAAC;QAEF,qCAAqC;QACrC,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,SAAS,CACtC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,aAAa,GAAG,IAAI,CAClC,CAAC;QACF,uCAAuC;QACrC,IAAI,CAAC,WAAW,CAAC,iBAAiB,EAAE,CAAC;IACzC,CAAC;IAED,iBAAiB,CAAC,WAAqB;QACrC,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC;IAC1C,CAAC;IAED,iBAAiB,CAAC,WAAqB;QACrC,IAAI,CAAC,WAAW,CAAC,iBAAiB,CAAC,WAAW,CAAC,CAAC;IAClD,CAAC;IAED,MAAM,CAAC,WAAqB;QAC1B,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;IACvC,CAAC;;wFAvCU,oBAAoB;oGAApB,oBAAoB;QDTjC,yEAA0B;QACtB,yEAAiD;QAC7C,yEAA4B;QAExB,iHAgEM;QAGN,gHAEM;QACV,4DAAM;QACV,4DAAM;QACV,4DAAM;;QAxEY,0DAA0B;QAA1B,0FAA0B;QAmE1B,0DAA4B;QAA5B,2FAA4B;;;;;;;;;;;;;;AEvE9C;AAAA;AAAO,MAAM,KAAK;CAIjB;;;;;;;;;;;;;ACJD;AAAA;AAAA,gFAAgF;AAChF,0EAA0E;AAC1E,gEAAgE;AAEzD,MAAM,WAAW,GAAG;IACzB,UAAU,EAAE,KAAK;IACjB,UAAU,EAAE,4BAA4B;IACxC,oBAAoB,EAAE,6GAA6G;CACpI,CAAC;AAEF;;;;;;GAMG;AACH,mEAAmE;;;;;;;;;;;;;ACZnE;AAAA;AAAO,MAAM,QAAQ;CAMpB;;;;;;;;;;;;;;;;;ACJM,MAAM,oBAAoB;IAE/B,gBAAgB,CAAC;IAEjB,QAAQ;IACR,CAAC;;wFALU,oBAAoB;oGAApB,oBAAoB;QCPjC,yEAA0B;QAEtB,yEAAyE;QACrE,qEAAI;QAAA,0EAAe;QAAA,4DAAK;QAExB,oEAAG;QAAA,wFAA6B;QAAA,4DAAI;QAEpC,oEAAG;QAAA,4FAAiC;QAAA,4DAAI;QAE5C,4DAAM;QACV,4DAAM;;;;;;;;;;;;;;ACNN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAqC;AAEsB;;;AAKpD,MAAM,cAAc;IAKzB,mFAAmF;IACnF,gGAAgG;IAEhG,YAAoB,UAAsB;QAAtB,eAAU,GAAV,UAAU,CAAY;QANlC,YAAO,GAAG,wEAAW,CAAC,UAAU,GAAG,WAAW,CAAC;QAC/C,gBAAW,GAAG,wEAAW,CAAC,UAAU,GAAE,mBAAmB,CAAC;IAKpB,CAAC;IAE/C,UAAU,CAAC,YAAoB;QAC7B,uCAAuC;QACvC,MAAM,UAAU,GAAG,GAAG,IAAI,CAAC,OAAO,IAAI,YAAY,EAAE,CAAC;QAErD,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAU,UAAU,CAAC,CAAC;IAClD,CAAC;IAED,sBAAsB,CAAC,OAAe,EACf,WAAmB,EACnB,aAAqB;QAE1C,4DAA4D;QAC5D,MAAM,SAAS,GAAG,GAAG,IAAI,CAAC,OAAO,+BAA+B,aAAa,EAAE;cAC3D,SAAS,OAAO,SAAS,WAAW,EAAE,CAAC;QAE3D,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAsB,SAAS,CAAC,CAAC;IAC7D,CAAC;IAED,cAAc,CAAC,aAAqB;QAClC,wCAAwC;QACxC,MAAM,SAAS,GAAG,GAAG,IAAI,CAAC,OAAO,+BAA+B,aAAa,EAAE,CAAC;QAChF,OAAO,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;IACrC,CAAC;IAED,cAAc,CAAC,UAAkB;QAC9B,oCAAoC;QACpC,MAAM,SAAS,GAAG,GAAG,IAAI,CAAC,OAAO,qCAAqC,UAAU,EAAE,CAAC;QACnF,OAAO,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;IACtC,CAAC;IAED,sBAAsB,CAAE,OAAe,EACf,WAAmB,EACnB,UAAkB;QAExC,wDAAwD;QACxD,MAAM,SAAS,GAAG,GAAG,IAAI,CAAC,OAAO,qCAAqC,UAAU,EAAE;cAC5D,SAAS,OAAO,SAAS,WAAW,EAAE,CAAC;QAE7D,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAsB,SAAS,CAAC,CAAC;IAC7D,CAAC;IAEO,WAAW,CAAC,SAAiB;QACnC,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAsB,SAAS,CAAC,CAAC,IAAI,CAC7D,0DAAG,CAAC,QAAQ,CAAC,EAAE,CAAC,QAAQ,CAAC,SAAS,CAAC,QAAQ,CAAC,CAC7C,CAAC;IACJ,CAAC;IAED,oBAAoB;QAClB,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAA6B,IAAI,CAAC,WAAW,CAAC,CAAC,IAAI,CAC3E,0DAAG,CAAC,QAAQ,CAAC,EAAE,CAAC,QAAQ,CAAC,SAAS,CAAC,eAAe,CAAC,CAClD,CAAC;IACN,CAAC;;4EA7DU,cAAc;iGAAd,cAAc,WAAd,cAAc,mBAFb,MAAM;;;;;;;;;;;;;ACPpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAsC;AACD;AAGsB;;;AAKpD,MAAM,mBAAmB;IAK9B,yFAAyF;IACzF,mFAAmF;IAEnF,YAAoB,UAAsB;QAAtB,eAAU,GAAV,UAAU,CAAY;QANlC,iBAAY,GAAG,wEAAW,CAAC,UAAU,GAAG,YAAY,CAAC;QACrD,cAAS,GAAG,wEAAW,CAAC,UAAU,GAAG,SAAS,CAAC;IAKT,CAAC;IAE/C,YAAY;QAEV,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAuB,IAAI,CAAC,YAAY,CAAC,CAAC,IAAI,CACtE,0DAAG,CAAC,QAAQ,CAAC,EAAE,CAAC,QAAQ,CAAC,SAAS,CAAC,SAAS,CAAC,CAC9C,CAAC;IACJ,CAAC;IAED,SAAS,CAAC,cAAsB;QAE9B,YAAY;QACZ,MAAM,cAAc,GAAG,GAAG,IAAI,CAAC,SAAS,kCAAkC,cAAc,EAAE,CAAC;QAE3F,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAoB,cAAc,CAAC,CAAC,IAAI,CAChE,0DAAG,CAAC,QAAQ,CAAC,EAAE,CAAC,QAAQ,CAAC,SAAS,CAAC,MAAM,CAAC,CAC3C,CAAC;IACJ,CAAC;IAED,mBAAmB,CAAC,UAAkB;QAEpC,IAAI,IAAI,GAAa,EAAE,CAAC;QAExB,0CAA0C;QAC1C,yCAAyC;QAEzC,KAAK,IAAI,QAAQ,GAAG,UAAU,EAAE,QAAQ,IAAI,EAAE,EAAE,QAAQ,EAAE,EAAC;YACzD,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;SACrB;QAED,OAAO,+CAAE,CAAC,IAAI,CAAC,CAAC;IAClB,CAAC;IAEH,kBAAkB;QAEhB,IAAI,IAAI,GAAa,EAAE,CAAC;QAExB,yCAAyC;QACzC,oDAAoD;QAEpD,MAAM,SAAS,GAAW,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;QACnD,MAAM,OAAO,GAAW,SAAS,GAAG,EAAE,CAAC;QAEvC,KAAK,IAAI,OAAO,GAAG,SAAS,EAAE,OAAO,IAAI,OAAO,EAAE,OAAO,EAAE,EAAC;YAC1D,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;SACpB;QAEC,OAAO,+CAAE,CAAC,IAAI,CAAC,CAAC;IACpB,CAAC;;sFAxDY,mBAAmB;sGAAnB,mBAAmB,WAAnB,mBAAmB,mBAFlB,MAAM;;;;;;;;;;;;;ACTpB;AAAA;AAAO,MAAM,WAAW;CAIvB;;;;;;;;;;;;;ACAD;AAAA;AAAA;AAAA;AAAA;AAA2D;;;AAKpD,MAAM,mBAAmB;IAG9B,kFAAkF;IAElF,YAAoB,UAAsB;QAAtB,eAAU,GAAV,UAAU,CAAY;QAHlC,aAAQ,GAAG,wEAAW,CAAC,UAAU,GAAG,SAAS,CAAC;IAGR,CAAC;IAE/C,eAAe,CAAC,QAAgB;QAE9B,+CAA+C;QAC/C,MAAM,eAAe,GAAG,GAAG,IAAI,CAAC,QAAQ,2DAA2D,QAAQ,EAAE,CAAC;QAE9G,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAA0B,eAAe,CAAC,CAAC;IACvE,CAAC;;sFAbU,mBAAmB;sGAAnB,mBAAmB,WAAnB,mBAAmB,mBAFlB,MAAM;;;;;;;;;;;;;ACLpB;AAAA;AAAO,MAAM,QAAQ;IASjB,YAAY,OAAgB;QACxB,IAAI,CAAC,EAAE,GAAG,OAAO,CAAC,EAAE,CAAC;QACrB,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC;QACzB,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAC;QACjC,IAAI,CAAC,SAAS,GAAG,OAAO,CAAC,SAAS,CAAC;QAEnC,IAAI,CAAC,QAAQ,GAAG,CAAC,CAAC;IACtB,CAAC;CACJ;;;;;;;;;;;;;AClBD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAiF;AAGpC;AACS;AACH;AAM0B;AAClB;AACD;AAEJ;;;;;;;;;;ICClB,sEAA6E;IACzE,oFACJ;IAAA,4DAAM;;;IAEN,sEAAwC;IACpC,8GACJ;IAAA,4DAAM;;;IATV,0EACoC;IAEhC,qHAEM;IAEN,qHAEM;IAEV,4DAAM;;;IARI,0DAAqE;IAArE,+IAAqE;IAIrE,0DAAgC;IAAhC,mGAAgC;;;IAkBtC,sEAA2E;IACvE,mFACJ;IAAA,4DAAM;;;IAEN,sEAAuC;IACnC,6GACJ;IAAA,4DAAM;;;IATV,0EACoC;IAEhC,qHAEM;IAEN,qHAEM;IAEV,4DAAM;;;IARI,0DAAmE;IAAnE,6IAAmE;IAInE,0DAA+B;IAA/B,kGAA+B;;;IAmBrC,sEAAmC;IAC/B,+EACJ;IAAA,4DAAM;;;IAEN,sEAAkC;IAC9B,wGACJ;IAAA,4DAAM;;;IATV,0EACoC;IAEhC,qHAEM;IAEN,qHAEM;IAEV,4DAAM;;;IARI,0DAA2B;IAA3B,8FAA2B;IAI3B,0DAA0B;IAA1B,6FAA0B;;;IAoBhC,6EAA8D;IAC1D,uDACJ;IAAA,4DAAS;;;IAFiC,gFAAmB;IACzD,0DACJ;IADI,4FACJ;;;IAKA,sEAAoD;IAChD,iFACJ;IAAA,4DAAM;;;IAJV,0EACoC;IAChC,qHAEM;IACV,4DAAM;;;IAHI,0DAA4C;IAA5C,+GAA4C;;;IAiBlD,sEACoG;IAChG,gFACJ;IAAA,4DAAM;;;IAEN,sEAAoD;IAChD,uGACJ;IAAA,4DAAM;;;IATV,0EACoC;IAChC,qHAGM;IAEN,qHAEM;IAEV,4DAAM;;;IARG,0DAA6F;IAA7F,uKAA6F;IAI5F,0DAA4C;IAA5C,+GAA4C;;;IAkBlD,sEACgG;IAC5F,8EACJ;IAAA,4DAAM;;;IAEN,sEAAkD;IAC9C,qGACJ;IAAA,4DAAM;;;IATV,0EACoC;IAChC,qHAGM;IAEN,qHAEM;IAEV,4DAAM;;;IARG,0DAAyF;IAAzF,mKAAyF;IAIxF,0DAA0C;IAA1C,6GAA0C;;;IAehD,6EAAsE;IAClE,uDACJ;IAAA,4DAAS;;;IAF2C,8EAAiB;IACjE,0DACJ;IADI,0FACJ;;;IAKA,sEAAkD;IAC9C,+EACJ;IAAA,4DAAM;;;IAJV,0EACoC;IAChC,qHAEM;IACV,4DAAM;;;IAHI,0DAA0C;IAA1C,6GAA0C;;;IAiBhD,sEACsG;IAClG,iFACJ;IAAA,4DAAM;;;IAEN,sEAAqD;IACjD,yGACJ;IAAA,4DAAM;;;IATV,0EACoC;IAChC,qHAGM;IAEN,qHAEM;IAEV,4DAAM;;;IARG,0DAA+F;IAA/F,yKAA+F;IAI9F,0DAA6C;IAA7C,gHAA6C;;;IA6BnD,6EAA8D;IAC1D,uDACJ;IAAA,4DAAS;;;IAFiC,gFAAmB;IACzD,0DACJ;IADI,4FACJ;;;IAKA,sEAAmD;IAC/C,iFACJ;IAAA,4DAAM;;;IAJV,0EACoC;IAChC,qHAEM;IACV,4DAAM;;;IAHI,0DAA2C;IAA3C,+GAA2C;;;IAiBjD,sEACkG;IAC9F,gFACJ;IAAA,4DAAM;;;IAEN,sEAAmD;IAC/C,uGACJ;IAAA,4DAAM;;;IATV,0EACoC;IAChC,sHAGM;IAEN,sHAEM;IAEV,4DAAM;;;IARG,0DAA2F;IAA3F,uKAA2F;IAI1F,0DAA2C;IAA3C,+GAA2C;;;IAiBjD,sEAC8F;IAC1F,8EACJ;IAAA,4DAAM;;;IAEN,sEAAiD;IAC7C,qGACJ;IAAA,4DAAM;;;IATV,0EACoC;IAChC,sHAGM;IAEN,sHAEM;IAEV,4DAAM;;;IARG,0DAAuF;IAAvF,mKAAuF;IAItF,0DAAyC;IAAzC,6GAAyC;;;IAe/C,6EAAqE;IACjE,uDACJ;IAAA,4DAAS;;;IAF0C,8EAAiB;IAChE,0DACJ;IADI,0FACJ;;;IAKA,sEAAiD;IAC7C,+EACJ;IAAA,4DAAM;;;IAJV,0EACoC;IAChC,sHAEM;IACV,4DAAM;;;IAHI,0DAAyC;IAAzC,6GAAyC;;;IAiB/C,sEACoG;IAChG,iFACJ;IAAA,4DAAM;;;IAEN,sEAAoD;IAChD,yGACJ;IAAA,4DAAM;;;IATV,0EACoC;IAChC,sHAGM;IAEN,sHAEM;IAEV,4DAAM;;;IARG,0DAA6F;IAA7F,yKAA6F;IAI5F,0DAA4C;IAA5C,gHAA4C;;AD3R/E,MAAM,iBAAiB;IA2B5B,YAAoB,WAAwB,EACxB,mBAAwC,EACxC,WAAwB,EACxB,eAAgC,EAChC,YAA0B,EAC1B,MAAc;QALd,gBAAW,GAAX,WAAW,CAAa;QACxB,wBAAmB,GAAnB,mBAAmB,CAAqB;QACxC,gBAAW,GAAX,WAAW,CAAa;QACxB,oBAAe,GAAf,eAAe,CAAiB;QAChC,iBAAY,GAAZ,YAAY,CAAc;QAC1B,WAAM,GAAN,MAAM,CAAQ;QA5BlC,eAAU,GAAW,CAAC,CAAC;QACvB,kBAAa,GAAW,CAAC,CAAC;QAE1B,oBAAe,GAAa,EAAE,CAAC;QAC/B,qBAAgB,GAAa,EAAE,CAAC;QAEhC,cAAS,GAAc,EAAE,CAAC;QAE1B,0BAAqB,GAAY,EAAE,CAAC;QACpC,yBAAoB,GAAY,EAAE,CAAC;QAEnC,YAAO,GAAY,cAAc,CAAC;QAElC,uBAAuB;QACvB,WAAM,GAAG,MAAM,CAAC,wEAAW,CAAC,oBAAoB,CAAC,CAAC;QAElD,gBAAW,GAAgB,IAAI,uEAAW,EAAE,CAAC;QAC7C,cAAS,GAAc,IAAI,mEAAS,EAAE,CAAC;QAEvC,iBAAY,GAAQ,EAAE,CAAC;QAEvB,eAAU,GAAY,KAAK,CAAC;IAOU,CAAC;IAEvC,QAAQ;QACN,2BAA2B;QAC3B,IAAI,CAAC,sBAAsB,EAAE,CAAC;QAC9B,IAAI,CAAC,iBAAiB,EAAE,CAAC;QAEzB,oDAAoD;QACpD,MAAM,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC;QAE/D,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC;YAC9C,QAAQ,EAAE,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC;gBAC/B,SAAS,EAAE,IAAI,0DAAW,CAAC,EAAE,EACH,CAAE,yDAAU,CAAC,QAAQ;oBACnB,yDAAU,CAAC,SAAS,CAAC,CAAC,CAAC;oBACvB,0FAAkB,CAAC,iBAAiB,CAAC,CAAC;gBAClE,QAAQ,EAAE,IAAI,0DAAW,CAAC,EAAE,EACF,CAAC,yDAAU,CAAC,QAAQ;oBACnB,yDAAU,CAAC,SAAS,CAAC,CAAC,CAAC;oBACvB,0FAAkB,CAAC,iBAAiB,CAAC,CAAC;gBACjE,KAAK,EAAE,IAAI,0DAAW,CAAC,QAAQ,EACT,CAAC,yDAAU,CAAC,QAAQ,EAAC,yDAAU,CAAC,OAAO,CAAC,2CAA2C,CAAC,CAAC,CAAC;aAC7G,CAAC;YACF,eAAe,EAAE,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC;gBACtC,MAAM,EAAG,IAAI,0DAAW,CAAC,EAAE,EAAC,CAAC,yDAAU,CAAC,QAAQ,EAAE,yDAAU,CAAC,SAAS,CAAC,CAAC,CAAC;oBAC5C,0FAAkB,CAAC,iBAAiB,CAAC,CAAC;gBACnE,IAAI,EAAE,IAAI,0DAAW,CAAC,EAAE,EAAC,CAAC,yDAAU,CAAC,QAAQ,EAAE,yDAAU,CAAC,SAAS,CAAC,CAAC,CAAC;oBAC5C,0FAAkB,CAAC,iBAAiB,CAAC,CAAC;gBAChE,KAAK,EAAE,IAAI,0DAAW,CAAC,EAAE,EAAC,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC;gBAChD,OAAO,EAAE,IAAI,0DAAW,CAAC,EAAE,EAAC,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC;gBAClD,OAAO,EAAE,IAAI,0DAAW,CAAC,EAAE,EAAC,CAAC,yDAAU,CAAC,QAAQ,EAAE,yDAAU,CAAC,SAAS,CAAC,CAAC,CAAC;oBAC5C,0FAAkB,CAAC,iBAAiB,CAAC,CAAC;aACpE,CAAC;YACF,cAAc,EAAE,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC;gBACrC,MAAM,EAAG,IAAI,0DAAW,CAAC,EAAE,EAAC,CAAC,yDAAU,CAAC,QAAQ,EAAE,yDAAU,CAAC,SAAS,CAAC,CAAC,CAAC;oBAC5C,0FAAkB,CAAC,iBAAiB,CAAC,CAAC;gBACnE,IAAI,EAAE,IAAI,0DAAW,CAAC,EAAE,EAAC,CAAC,yDAAU,CAAC,QAAQ,EAAE,yDAAU,CAAC,SAAS,CAAC,CAAC,CAAC;oBAC5C,0FAAkB,CAAC,iBAAiB,CAAC,CAAC;gBAChE,KAAK,EAAE,IAAI,0DAAW,CAAC,EAAE,EAAC,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC;gBAChD,OAAO,EAAE,IAAI,0DAAW,CAAC,EAAE,EAAC,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC;gBAClD,OAAO,EAAE,IAAI,0DAAW,CAAC,EAAE,EAAC,CAAC,yDAAU,CAAC,QAAQ,EAAE,yDAAU,CAAC,SAAS,CAAC,CAAC,CAAC;oBAC5C,0FAAkB,CAAC,iBAAiB,CAAC,CAAC;aACpE,CAAC;YACF,UAAU,EAAE,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC;YACjC,uDAAuD;YACvD,gFAAgF;YAChF,0EAA0E;YAC1E,0FAA0F;YAC1F,2FAA2F;YAC3F,yBAAyB;YACzB,uBAAuB;aACxB,CAAC;SACH,CAAC,CAAC;QAEH;;;;;;;;;;;;;;;;;;;;UAoBE;QAEF,qBAAqB;QACrB,IAAI,CAAC,mBAAmB,CAAC,YAAY,EAAE,CAAC,SAAS,CAC/C,IAAI,CAAC,EAAE;YACL,OAAO,CAAC,GAAG,CAAC,uBAAuB,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;YAC5D,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;QACxB,CAAC,CACF;IACH,CAAC;IACD,sBAAsB;QACpB,iCAAiC;QACjC,IAAI,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC;QAEtC,uBAAuB;QACvB,IAAI,CAAC,WAAW,GAAI,QAAQ,CAAC,MAAM,CAAC,MAAM,EAAE,EAAE,cAAc,EAAE,IAAI,EAAC,CAAC,CAAC;QAErE,kEAAkE;QAClE,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC;QAExC,8DAA8D;QAC9D,IAAI,CAAC,WAAW,CAAC,EAAE,CAAC,QAAQ,EAAE,CAAC,KAAU,EAAE,EAAE;YAE3C,qCAAqC;YACrC,IAAI,CAAC,YAAY,GAAG,QAAQ,CAAC,cAAc,CAAC,aAAa,CAAC,CAAC;YAE3D,IAAG,KAAK,CAAC,QAAQ,EAAE;gBACjB,IAAI,CAAC,YAAY,CAAC,WAAW,GAAG,EAAE,CAAC;aACpC;iBAAM,IAAI,KAAK,CAAC,KAAK,EAAE;gBACtB,IAAI,CAAC,YAAY,CAAC,WAAW,GAAG,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC;aACrD;QACH,CAAC,CAAC;IACJ,CAAC;IAED,iBAAiB;QACf,wCAAwC;QACxC,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,SAAS,CACtC,aAAa,CAAC,EAAE,CAAC,IAAI,CAAC,aAAa,GAAG,aAAa,CACpD,CAAC;QAEF,qCAAqC;QACrC,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,SAAS,CACnC,UAAU,CAAC,EAAE,CAAC,IAAI,CAAC,UAAU,GAAG,UAAU,CAC3C,CAAC;IACJ,CAAC;IAED,IAAI,SAAS,KAAI,OAAO,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,oBAAoB,CAAC,CAAC,EAAC;IAC1E,IAAI,QAAQ,KAAI,OAAO,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,mBAAmB,CAAC,CAAC,EAAC;IACxE,IAAI,KAAK,KAAI,OAAO,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC,EAAC;IAElE,IAAI,qBAAqB,KAAI,OAAO,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,wBAAwB,CAAC,CAAC,EAAC;IAC1F,IAAI,mBAAmB,KAAI,OAAO,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,sBAAsB,CAAC,CAAC,EAAC;IACtF,IAAI,oBAAoB,KAAI,OAAO,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,uBAAuB,CAAC,CAAC,EAAC;IACxF,IAAI,sBAAsB,KAAI,OAAO,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,yBAAyB,CAAC,CAAC,EAAC;IAC5F,IAAI,sBAAsB,KAAI,OAAO,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,yBAAyB,CAAC,CAAC,EAAC;IAE5F,IAAI,oBAAoB,KAAI,OAAO,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,uBAAuB,CAAC,CAAC,EAAC;IACxF,IAAI,kBAAkB,KAAI,OAAO,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,qBAAqB,CAAC,CAAC,EAAC;IACpF,IAAI,mBAAmB,KAAI,OAAO,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,sBAAsB,CAAC,CAAC,EAAC;IACtF,IAAI,qBAAqB,KAAI,OAAO,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,wBAAwB,CAAC,CAAC,EAAC;IAC1F,IAAI,qBAAqB,KAAI,OAAO,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,wBAAwB,CAAC,CAAC,EAAC;IAE1F,IAAI,cAAc,KAAI,OAAO,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,qBAAqB,CAAC,CAAC,EAAC;IAChF,IAAI,oBAAoB,KAAI,OAAO,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,uBAAuB,CAAC,CAAC,EAAC;IACxF,IAAI,gBAAgB,KAAI,OAAO,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,uBAAuB,CAAC,CAAC,EAAC;IACpF,IAAI,sBAAsB,KAAI,OAAO,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,yBAAyB,CAAC,CAAC,EAAC;IAE5F,mCAAmC,CAAC,KAAK;QAEvC,IAAG,KAAK,CAAC,MAAM,CAAC,OAAO,EAAC;YACtB,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC,cAAc;iBAC3C,QAAQ,CAAC,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;YAEnE,yDAAyD;YACzD,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC,qBAAqB,CAAC;SACxD;aACG;YACF,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC,cAAc,CAAC,KAAK,EAAE,CAAC;YAEvD,oBAAoB;YACpB,IAAI,CAAC,oBAAoB,GAAG,EAAE,CAAC;SAChC;IAEH,CAAC;IAED,QAAQ;QACN,OAAO,CAAC,GAAG,CAAC,4BAA4B,CAAC,CAAC;QAE1C,IAAG,IAAI,EAAC,IAAI,CAAC,iBAAiB,CAAC,OAAO,EAAC;YACrC,IAAI,CAAC,iBAAiB,CAAC,gBAAgB,EAAE,CAAC;YAC1C,OAAO;SACR;QAED,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,KAAK,CAAC,CAAC;QAC1D,OAAO,CAAC,GAAG,CAAC,uBAAuB,GAAG,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QAC1F,OAAO,CAAC,GAAG,CAAC,kCAAkC,GAAG,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QACnH,OAAO,CAAC,GAAG,CAAC,gCAAgC,GAAG,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QAG/G,eAAe;QACf,IAAI,KAAK,GAAG,IAAI,0DAAK,EAAE,CAAC;QACxB,KAAK,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC;QACnC,KAAK,CAAC,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC;QAEzC,gBAAgB;QAChB,MAAM,SAAS,GAAG,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC;QAE7C,kCAAkC;QAClC,UAAU;QACV,oCAAoC;QACpC,6CAA6C;QAC7C,iDAAiD;QACjD,IAAI;QAEJ,mCAAmC;QACnC,IAAI,UAAU,GAAgB,SAAS,CAAC,GAAG,CAAC,YAAY,CAAC,EAAE,CAAC,IAAI,mEAAS,CAAC,YAAY,CAAC,CAAC,CAAC;QAEzF,iBAAiB;QACjB,IAAI,QAAQ,GAAG,IAAI,gEAAQ,EAAE,CAAC;QAE9B,8BAA8B;QAC9B,QAAQ,CAAC,QAAQ,GAAG,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,KAAK,CAAC;QAEtE,sCAAsC;QACtC,QAAQ,CAAC,eAAe,GAAG,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC,iBAAiB,CAAC,CAAC,KAAK,CAAC;QACpF,MAAM,aAAa,GAAU,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC,CAAC;QACxF,MAAM,eAAe,GAAY,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC,CAAC;QAC9F,QAAQ,CAAC,eAAe,CAAC,KAAK,GAAG,aAAa,CAAC,IAAI,CAAC;QACpD,QAAQ,CAAC,eAAe,CAAC,OAAO,GAAG,eAAe,CAAC,IAAI,CAAC;QAExD,qCAAqC;QACrC,QAAQ,CAAC,cAAc,GAAG,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC,gBAAgB,CAAC,CAAC,KAAK,CAAC;QAClF,MAAM,YAAY,GAAU,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC,CAAC;QACtF,MAAM,cAAc,GAAY,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC,CAAC;QAC5F,QAAQ,CAAC,cAAc,CAAC,KAAK,GAAG,YAAY,CAAC,IAAI,CAAC;QAClD,QAAQ,CAAC,cAAc,CAAC,OAAO,GAAG,cAAc,CAAC,IAAI,CAAC;QAEtD,0CAA0C;QAC1C,QAAQ,CAAC,KAAK,GAAG,KAAK,CAAC;QACvB,QAAQ,CAAC,UAAU,GAAG,UAAU,CAAC;QAEjC,sBAAsB;QACtB,IAAI,CAAC,WAAW,CAAC,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,UAAU,GAAG,GAAG,CAAC,CAAC;QAC5D,IAAI,CAAC,WAAW,CAAC,QAAQ,GAAG,KAAK,CAAC;QAClC,IAAI,CAAC,WAAW,CAAC,YAAY,GAAG,QAAQ,CAAC,QAAQ,CAAC,KAAK,CAAC;QAExD,qBAAqB;QACrB,uBAAuB;QACvB,sBAAsB;QACtB,aAAa;QAEb,IAAG,CAAC,IAAI,CAAC,iBAAiB,CAAC,OAAO,IAAI,IAAI,CAAC,YAAY,CAAC,WAAW,KAAK,EAAE,EAAC;YACzE,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;YACvB,IAAI,CAAC,eAAe,CAAC,mBAAmB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,SAAS,CAClE,CAAC,qBAAqB,EAAE,EAAE;gBACxB,IAAI,CAAC,MAAM,CAAC,kBAAkB,CAAC,qBAAqB,CAAC,aAAa,EAChE;oBACE,cAAc,EAAE;wBACd,IAAI,EAAE,IAAI,CAAC,WAAW;wBACtB,eAAe,EAAE;4BACf,KAAK,EAAE,QAAQ,CAAC,QAAQ,CAAC,KAAK;4BAC9B,IAAI,EAAE,GAAG,QAAQ,CAAC,QAAQ,CAAC,SAAS,IAAI,QAAQ,CAAC,QAAQ,CAAC,QAAQ,EAAE;4BACpE,OAAO,EAAE;gCACP,KAAK,EAAE,QAAQ,CAAC,cAAc,CAAC,MAAM;gCACrC,IAAI,EAAE,QAAQ,CAAC,cAAc,CAAC,IAAI;gCAClC,KAAK,EAAE,QAAQ,CAAC,cAAc,CAAC,KAAK;gCACpC,WAAW,EAAE,QAAQ,CAAC,cAAc,CAAC,OAAO;gCAC5C,OAAO,EAAE,IAAI,CAAC,qBAAqB,CAAC,KAAK,CAAC,IAAI;6BAC/C;yBACF;qBACF;iBACF,EAAE,EAAC,aAAa,EAAE,KAAK,EAAC,CAAC;qBACzB,IAAI,CAAC,CAAC,MAAU,EAAE,EAAE;oBACnB,IAAI,MAAM,CAAC,KAAK,EAAE;wBAChB,KAAK,CAAC,uBAAuB,MAAM,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;wBACrD,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;qBACzB;yBAAM;wBACL,uCAAuC;wBACvC,IAAI,CAAC,eAAe,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,SAAS,CAAC;4BAClD,IAAI,EAAE,CAAC,QAAa,EAAE,EAAE;gCACtB,KAAK,CAAC,0DAA0D,QAAQ,CAAC,mBAAmB,EAAE,CAAC,CAAC;gCAEhG,IAAI,CAAC,SAAS,EAAE,CAAC;gCACjB,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;gCAExB,sBAAsB;gCACtB,IAAI,CAAC,SAAS,CAAC,SAAS,GAAG,QAAQ,CAAC,QAAQ,CAAC,SAAS,CAAC;gCACvD,IAAI,CAAC,SAAS,CAAC,QAAQ,GAAG,QAAQ,CAAC,QAAQ,CAAC,QAAQ,CAAC;gCACrD,IAAI,CAAC,SAAS,CAAC,MAAM,GAAG,IAAI,CAAC,WAAW,CAAC,MAAM,GAAC,GAAG,CAAC;gCACpD,IAAI,CAAC,SAAS,CAAC,UAAU,GAAG,QAAQ,CAAC,mBAAmB,CAAC;gCACzD,IAAI,CAAC,SAAS,CAAC,SAAS,GAAG,QAAQ,CAAC,QAAQ,CAAC,KAAK,CAAC;gCAEnD,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;gCAC5B,wBAAwB;gCACxB,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,IAAI,CAC7C,CAAC,aAAkB,EAAE,EAAE;oCACrB,OAAO,CAAC,GAAG,CAAC,GAAG,aAAa,EAAE,CAAC,CAAC;gCAClC,CAAC,EACD,CAAC,UAAe,EAAE,EAAE;oCAClB,OAAO,CAAC,GAAG,CAAC,yCAAyC,UAAU,CAAC,OAAO,EAAE,CAAC,CAAC;gCAC7E,CAAC,CACF,CAAC;4BACJ,CAAC;4BACD,KAAK,EAAE,CAAC,GAAQ,EAAE,EAAE;gCAClB,KAAK,CAAC,uBAAuB,GAAG,CAAC,OAAO,EAAE,CAAC,CAAC;gCAC5C,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;4BAC1B,CAAC;yBACF,CAAC;qBACH;gBACH,CAAC,CAAC,CAAC;YACP,CAAC,CACF,CAAC;SACH;aAAM;YACL,IAAI,CAAC,iBAAiB,CAAC,gBAAgB,EAAE,CAAC;YAC1C,OAAO;SACR;QAGD,wDAAwD;QACxD,wDAAwD;QACxD,0BAA0B;QAC1B,wGAAwG;QAExG,qBAAqB;QACrB,0BAA0B;QAE1B,SAAS;QACT,sBAAsB;QACtB,qDAAqD;QACrD,QAAQ;QACR,MAAM;QACN,KAAK;IACP,CAAC;IAED,SAAS;QACP,iBAAiB;QACjB,IAAI,CAAC,WAAW,CAAC,SAAS,GAAG,EAAE,CAAC;QAChC,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACpC,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACvC,IAAI,CAAC,WAAW,CAAC,gBAAgB,EAAE,CAAC;QAEpC,iBAAiB;QACjB,IAAI,CAAC,iBAAiB,CAAC,KAAK,EAAE,CAAC;QAE/B,oCAAoC;QACpC,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,WAAW,CAAC,CAAC;IACzC,CAAC;IAED,oBAAoB;QAElB,MAAM,mBAAmB,GAAG,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;QAErE,MAAM,WAAW,GAAW,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;QACrD,MAAM,YAAY,GAAW,MAAM,CAAC,mBAAmB,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC;QAE9E,iFAAiF;QAEjF,IAAI,UAAkB,CAAC;QAEvB,IAAI,WAAW,KAAK,YAAY,EAAC;YAC/B,UAAU,GAAG,IAAI,IAAI,EAAE,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC;SACxC;aACI;YACH,UAAU,GAAG,CAAC,CAAC;SAChB;QAED,IAAI,CAAC,mBAAmB,CAAC,mBAAmB,CAAC,UAAU,CAAC,CAAC,SAAS,CAChE,IAAI,CAAC,EAAE;YACL,OAAO,CAAC,GAAG,CAAC,gCAAgC,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;YACrE,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC;QAC/B,CAAC,CACF,CAAC;IACJ,CAAC;IAED,SAAS,CAAC,aAAqB;QAE7B,MAAM,SAAS,GAAG,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;QAE5D,MAAM,WAAW,GAAG,SAAS,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC;QACjD,MAAM,WAAW,GAAG,SAAS,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC;QAEjD,OAAO,CAAC,GAAG,CAAC,GAAG,aAAa,kBAAkB,WAAW,EAAE,CAAC,CAAC;QAC7D,OAAO,CAAC,GAAG,CAAC,GAAG,aAAa,kBAAkB,WAAW,EAAE,CAAC,CAAC;QAE7D,IAAI,CAAC,mBAAmB,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC,SAAS,CACvD,IAAI,CAAC,EAAE;YAEL,IAAG,aAAa,KAAK,iBAAiB,EAAC;gBACrC,IAAI,CAAC,qBAAqB,GAAG,IAAI,CAAC;aACnC;iBACG;gBACF,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC;aAClC;YAED,uCAAuC;YACvC,SAAS,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;QAC3C,CAAC,CACF,CAAC;IACJ,CAAC;;kFApZU,iBAAiB;iGAAjB,iBAAiB;QCvB9B,yEAAiC;QAC7B,yEAAiD;QAC7C,yEAA4B;QACxB,0EAA8D;QAAxB,6IAAY,cAAU,IAAC;QAGzD,yEAAgD;QAC5C,qEAAI;QAAA,mEAAQ;QAAA,4DAAK;QACjB,yEAAiB;QACb,yEAAsB;QAAA,wEAAO;QAAA,sEAAU;QAAA,4DAAQ;QAAA,4DAAM;QACrD,0EAAsB;QAClB,0EAAyB;QACrB,uEAA+C;QAE/C,gHAWM;QACV,4DAAM;QACV,4DAAM;QACV,4DAAM;QAEN,0EAAiB;QACb,0EAAsB;QAAA,yEAAO;QAAA,qEAAS;QAAA,4DAAQ;QAAA,4DAAM;QACpD,0EAAsB;QAClB,0EAAyB;QACrB,wEAA8C;QAE9C,gHAWM;QAEV,4DAAM;QACV,4DAAM;QACV,4DAAM;QAEN,0EAAiB;QACb,0EAAsB;QAAA,yEAAO;QAAA,iEAAK;QAAA,4DAAQ;QAAA,4DAAM;QAChD,0EAAsB;QAClB,0EAAyB;QACrB,wEAA2C;QAE3C,gHAWM;QAEV,4DAAM;QACV,4DAAM;QACV,4DAAM;QACV,4DAAM;QAGN,2EAAuD;QACnD,sEAAI;QAAA,4EAAgB;QAAA,4DAAK;QAEzB,0EAAiB;QACb,0EAAsB;QAAA,yEAAO;QAAA,mEAAO;QAAA,4DAAQ;QAAA,4DAAM;QAClD,0EAAsB;QAClB,0EAAyB;QACrB,8EAA0E;QAAxC,4IAAU,cAAU,iBAAiB,CAAC,IAAC;QACrE,sHAES;QACb,4DAAS;QAET,gHAKM;QAEV,4DAAM;QACV,4DAAM;QACV,4DAAM;QAEN,0EAAiB;QACb,0EAAsB;QAAA,yEAAO;QAAA,kEAAM;QAAA,4DAAQ;QAAA,4DAAM;QACjD,0EAAsB;QAClB,0EAAyB;QACrB,wEAA4C;QAE5C,gHAWM;QAEV,4DAAM;QACV,4DAAM;QACV,4DAAM;QAEN,0EAAiB;QACb,0EAAsB;QAAA,yEAAO;QAAA,gEAAI;QAAA,4DAAQ;QAAA,4DAAM;QAC/C,0EAAsB;QAClB,0EAAyB;QACrB,wEAA0C;QAE1C,gHAWM;QAEV,4DAAM;QACV,4DAAM;QACV,4DAAM;QAEN,0EAAiB;QACb,0EAAsB;QAAA,yEAAO;QAAA,iEAAK;QAAA,4DAAQ;QAAA,4DAAM;QAChD,0EAAsB;QAClB,0EAAyB;QACrB,8EAAgC;QAC5B,sHAES;QACb,4DAAS;QAET,gHAKM;QAEV,4DAAM;QACV,4DAAM;QACV,4DAAM;QAEN,0EAAiB;QACb,0EAAsB;QAAA,yEAAO;QAAA,oEAAQ;QAAA,4DAAQ;QAAA,4DAAM;QACnD,0EAAsB;QAClB,0EAAyB;QACrB,wEAA6C;QAE7C,gHAWM;QAEV,4DAAM;QACV,4DAAM;QACV,4DAAM;QAEV,4DAAM;QAGN,0EAAyB;QACrB,6EAA2B;QACvB,6EAA8E;QAAvD,iJAAU,+CAA2C,IAAC;QAA7E,4DAA8E;QAC9E,uEAAkC;QAAC,sGACvC;QAAA,4DAAQ;QACZ,4DAAM;QAGN,2EAAsD;QAClD,sEAAI;QAAA,2EAAe;QAAA,4DAAK;QAExB,0EAAiB;QACb,0EAAsB;QAAA,yEAAO;QAAA,mEAAO;QAAA,4DAAQ;QAAA,4DAAM;QAClD,0EAAsB;QAClB,0EAAyB;QACrB,8EAAyE;QAAvC,4IAAU,cAAU,gBAAgB,CAAC,IAAC;QACpE,sHAES;QACb,4DAAS;QAET,gHAKM;QAEV,4DAAM;QACV,4DAAM;QACV,4DAAM;QAEN,0EAAiB;QACb,0EAAsB;QAAA,yEAAO;QAAA,kEAAM;QAAA,4DAAQ;QAAA,4DAAM;QACjD,0EAAsB;QAClB,0EAAyB;QACrB,wEAA4C;QAE5C,kHAWM;QACV,4DAAM;QACV,4DAAM;QACV,4DAAM;QAEN,2EAAiB;QACb,2EAAsB;QAAA,0EAAO;QAAA,iEAAI;QAAA,4DAAQ;QAAA,4DAAM;QAC/C,2EAAsB;QAClB,2EAAyB;QACrB,yEAA0C;QAE1C,kHAWM;QAEV,4DAAM;QACV,4DAAM;QACV,4DAAM;QAEN,2EAAiB;QACb,2EAAsB;QAAA,0EAAO;QAAA,kEAAK;QAAA,4DAAQ;QAAA,4DAAM;QAChD,2EAAsB;QAClB,2EAAyB;QACrB,+EAAgC;QAC5B,wHAES;QACb,4DAAS;QAET,kHAKM;QAEV,4DAAM;QACV,4DAAM;QACV,4DAAM;QAEN,2EAAiB;QACb,2EAAsB;QAAA,0EAAO;QAAA,qEAAQ;QAAA,4DAAQ;QAAA,4DAAM;QACnD,2EAAsB;QAClB,2EAAyB;QACrB,yEAA6C;QAE7C,kHAWM;QAEV,4DAAM;QACV,4DAAM;QACV,4DAAM;QAEV,4DAAM;QAyHN,4EAAkD;QAC9C,uEAAI;QAAA,8EAAiB;QAAA,4DAAK;QAC1B,uEAA6B;QAE7B,uEAA6F;QACjG,4DAAM;QAGN,4EAAuB;QACnB,uEAAI;QAAA,8EAAiB;QAAA,4DAAK;QAC1B,sEAAG;QAAA,yDAAmC;QAAA,4DAAI;QAC1C,sEAAG;QAAA,2EAAc;QAAA,4DAAI;QACrB,sEAAG;QAAA,yDAA+C;;QAAA,4DAAI;QAC1D,4DAAM;QAGN,4EAAyB;QACrB,+EAAmE;QAAA,qEAAQ;QAAA,4DAAS;QACxF,4DAAM;QACV,4DAAO;QACX,4DAAM;QACV,4DAAM;QACV,4DAAM;;QAxcY,0DAA+B;QAA/B,4FAA+B;QAWX,2DAAiE;QAAjE,yIAAiE;QAsBjE,0DAA8D;QAA9D,sIAA8D;QAuB9D,0DAAqD;QAArD,6HAAqD;QA2B3B,2DAAY;QAAZ,kFAAY;QAKtC,0DAAwG;QAAxG,gLAAwG;QAiBxG,0DAAqG;QAArG,6KAAqG;QAuBrG,0DAA+F;QAA/F,uKAA+F;QAsBvE,0DAAwB;QAAxB,8FAAwB;QAKhD,0DAAkG;QAAlG,0KAAkG;QAiBlG,0DAAwG;QAAxG,gLAAwG;QAoC9E,2DAAY;QAAZ,kFAAY;QAKtC,0DAAqG;QAArG,6KAAqG;QAiBrG,0DAAkG;QAAlG,0KAAkG;QAsBlG,0DAA4F;QAA5F,oKAA4F;QAsBpE,0DAAuB;QAAvB,6FAAuB;QAK/C,0DAA+F;QAA/F,uKAA+F;QAiB/F,0DAAqG;QAArG,6KAAqG;QAoJpH,2DAAmC;QAAnC,2GAAmC;QAEnC,0DAA+C;QAA/C,gLAA+C;QAKP,0DAAuB;QAAvB,oFAAuB;;;;;;;;;;;;;;;;;;;;AC9b/E,MAAM,eAAe;IAE1B,YAAoB,MAAc;QAAd,WAAM,GAAN,MAAM,CAAQ;IAAI,CAAC;IAEvC,QAAQ;IACR,CAAC;IAED,QAAQ,CAAC,KAAa;QACpB,OAAO,CAAC,GAAG,CAAC,SAAS,KAAK,EAAE,CAAC,CAAC;QAC9B,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,WAAW,KAAK,EAAE,CAAC,CAAC;IAChD,CAAC;;8EAVU,eAAe;+FAAf,eAAe;;QCR5B,yEAAyB;QAErB,8EAGmD;QAA3C,8RAAiB,uBAAuB,IAAC;QAHjD,4DAGmD;QAEnD,4EAAkE;QAA1D,mRAAW,uBAAuB,IAAC;QACvC,mEACJ;QAAA,4DAAS;QACb,4DAAM;;;;;;;;;;;;;;ACNN;AAAA;AAAA;AAAA;AAAA;AAA2D;;;AAMpD,MAAM,eAAe;IAK1B,gGAAgG;IAChG,YAAoB,UAAsB;QAAtB,eAAU,GAAV,UAAU,CAAY;QAHlC,gBAAW,GAAG,wEAAW,CAAC,UAAU,GAAG,oBAAoB,CAAC;QAC5D,qBAAgB,GAAG,wEAAW,CAAC,UAAU,GAAG,0BAA0B,CAAC;IAEjC,CAAC;IAE/C,UAAU,CAAC,QAAkB;QAC3B,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAW,IAAI,CAAC,WAAW,EAAC,QAAQ,CAAC,CAAC;IACnE,CAAC;IAED,mBAAmB,CAAC,WAAwB;QAC1C,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAc,IAAI,CAAC,gBAAgB,EAAE,WAAW,CAAC,CAAC;IAC/E,CAAC;;8EAdU,eAAe;kGAAf,eAAe,WAAf,eAAe,mBAFd,MAAM;;;;;;;;;;;;;;;;;;;;;;;;;;;ACDb,MAAM,YAAY;IALzB;QAME,UAAK,GAAG,mBAAmB,CAAC;KAC7B;;wEAFY,YAAY;4FAAZ,YAAY;QCPzB,yEAA0B;QAGxB,2EAA8C;QAC5C,yEAAkB;QAChB,uEAA0B;QACxB,oEAAwE;QAC1E,4DAAI;QACN,4DAAM;QACN,uFAAuD;QAGzD,4DAAQ;QAIR,yEAA4B;QAE1B,4EAA+B;QAC7B,yEAAiD;QAC/C,yEAA6B;QAC3B,0EAAyB;QAEvB,yEAAyB;QAEzB,+EAAqC;QAErC,8EAAmC;QAGrC,4DAAM;QACN,sEAAgC;QAClC,4DAAM;QACR,4DAAM;QACR,4DAAS;QAIT,4EAA+B;QAGjC,4DAAM;QACR,4DAAM;QAKN,0EAAQ;QACN,sEAAI;QACF,sEAAI;QAAA,yEAAY;QAAA,oEAAQ;QAAA,4DAAI;QAAA,4DAAK;QACjC,sEAAI;QAAA,yEAAY;QAAA,sEAAU;QAAA,4DAAI;QAAA,4DAAK;QACnC,sEAAI;QAAA,yEAAY;QAAA,gEAAI;QAAA,4DAAI;QAAA,4DAAK;QAC/B,4DAAK;QACP,4DAAS;;;;;;;;;;;;;;ACrDT;AAAA;AAAO,MAAM,OAAO;CAWnB;;;;;;;;;;;;;ACTD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAuD;AAEA;;;AAOhD,MAAM,cAAc;IAIzB,YAAoB,eAAgC;QAAhC,oBAAe,GAAf,eAAe,CAAiB;QAElD,IAAI,CAAC,UAAU,GAAG,IAAI,qDAAU,CAAC;YAC/B,IAAI,EAAE,wBAAwB;YAC9B,QAAQ,EAAE;gBACR,YAAY,EAAE,IAAI;aACnB;YACD,OAAO,EAAE,oEAAW,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;YACpD,QAAQ,EAAE,oEAAW,CAAC,IAAI,CAAC,QAAQ;YACnC,WAAW,EAAE,oEAAW,CAAC,IAAI,CAAC,WAAW;YACzC,UAAU,EAAC;gBACT,IAAI,EAAE,IAAI;gBACV,MAAM,EAAE,oEAAW,CAAC,IAAI,CAAC,MAAM;gBAC/B,MAAM,EAAE,oEAAW,CAAC,IAAI,CAAC,MAAM;aAChC;SACF,CAAC,CAAC;IACL,CAAC;IAED,QAAQ;QACN,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC;QAEzB,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC;YACvB,EAAE,EAAE,sBAAsB;SAAC,EAAE,oEAAoE;QACjG,CAAC,QAAQ,EAAE,EAAE;YACX,IAAI,QAAQ,CAAC,MAAM,KAAK,SAAS,EAAC;gBAChC,IAAI,CAAC,eAAe,CAAC,kBAAkB,EAAE,CAAC;aAC3C;QACH,CAAC,EACD,CAAC,KAAK,EAAE,EAAE;YACR,MAAM,KAAK,CAAC;QACd,CAAC,CACF,CAAC;IACJ,CAAC;;4EApCU,cAAc;8FAAd,cAAc;QCT3B,yEAAkB;QACd,oEAAiD;QACrD,4DAAM;;;;;;;;;;;;;;ACFN;AAAA;AAAO,MAAM,SAAS;IAOlB,YAAY,QAAkB;QAC1B,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC,QAAQ,CAAC;QAClC,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC,SAAS,CAAC;QACpC,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC,QAAQ,CAAC;QAClC,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC,EAAE,CAAC;IACjC,CAAC;CACJ;;;;;;;;;;;;;;;;;;;;;;;ACPM,MAAM,mBAAmB;IAK9B,YAAoB,WAAwB;QAAxB,gBAAW,GAAX,WAAW,CAAa;QAH5C,eAAU,GAAW,IAAI,CAAC;QAC1B,kBAAa,GAAW,CAAC,CAAC;IAEsB,CAAC;IAEjD,QAAQ;QACN,IAAI,CAAC,gBAAgB,EAAE,CAAC;IAC1B,CAAC;IAGD,gBAAgB;QAEd,mCAAmC;QACnC,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,SAAS,CACnC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,UAAU,GAAG,IAAI,CAC/B,CAAC;QAEF,qCAAqC;QACrC,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,SAAS,CACtC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,aAAa,GAAG,IAAI,CAClC,CAAC;IACJ,CAAC;;sFAvBU,mBAAmB;mGAAnB,mBAAmB;QCRhC,yEAA2B;QACvB,uEAA8B;QAC1B,yEAAmB;QAAC,uDAChB;;QAAA,uEAAM;QAAC,uDAAoB;QAAA,4DAAO;QACtC,4DAAM;QACN,kEAAsD;QAC1D,4DAAI;QACR,4DAAM;;QALsB,0DAChB;QADgB,kKAChB;QAAO,0DAAoB;QAApB,6FAAoB;;;;;;;;;;;;;;ACFvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA0D;AAEX;AACyC;AACb;AACf;AAEC;AACmD;AAC3C;AAC2B;AAEzC;AAC8B;AACG;AACX;AACxB;AACe;AACoB;AAO5D;AAEqB;AACuC;AACG;AACd;;;AAE7E,MAAM,UAAU,GAAG,MAAM,CAAC,MAAM,CAAC;IAC/B,cAAc,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,EAAE;QACrC,MAAM,MAAM,GAAG,QAAQ,CAAC,GAAG,CAAC,sDAAM,CAAC,CAAC;QAEpC,6CAA6C;QAC7C,MAAM,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;IAC9B,CAAC;CACF,EAAE,8DAAW,CAAC,IAAI,CAAC,CAAC;AAErB,MAAM,MAAM,GAAY;IACtB,EAAC,IAAI,EAAE,eAAe,EAAE,SAAS,EAAE,wGAAqB,EAAE,WAAW,EAAE,CAAC,iEAAa,CAAC,EAAE;IACxF,EAAC,IAAI,EAAE,SAAS,EAAE,SAAS,EAAE,qGAAoB,EAAE,WAAW,EAAE,CAAC,iEAAa,CAAC,EAAC;IAEhF,EAAC,IAAI,EAAE,gBAAgB,EAAE,SAAS,EAAE,yEAAqB,EAAC;IAC1D,EAAC,IAAI,EAAE,OAAO,EAAE,SAAS,EAAE,iFAAc,EAAC;IAE1C,EAAC,IAAI,EAAE,UAAU,EAAE,SAAS,EAAE,0FAAiB,EAAC;IAChD,EAAC,IAAI,EAAE,cAAc,EAAE,SAAS,EAAE,qGAAoB,EAAC;IACvD,EAAC,IAAI,EAAE,cAAc,EAAE,SAAS,EAAE,6GAAuB,EAAC;IAC1D,EAAC,IAAI,EAAE,iBAAiB,EAAE,SAAS,EAAE,oGAAoB,EAAC;IAC1D,EAAC,IAAI,EAAE,oBAAoB,EAAE,SAAS,EAAE,oGAAoB,EAAC;IAC7D,EAAC,IAAI,EAAE,UAAU,EAAE,SAAS,EAAE,oGAAoB,EAAC;IACnD,EAAC,IAAI,EAAE,UAAU,EAAE,SAAS,EAAE,oGAAoB,EAAC;IACnD,EAAC,IAAI,EAAE,EAAE,EAAE,UAAU,EAAE,WAAW,EAAG,SAAS,EAAE,MAAM,EAAC;IACvD,EAAC,IAAI,EAAE,IAAI,EAAE,UAAU,EAAE,WAAW,EAAG,SAAS,EAAE,MAAM,EAAC;CAC1D,CAAC;AA6BK,MAAM,SAAS;;kEAAT,SAAS;yFAAT,SAAS,cAFR,2DAAY;8FAFb,CAAC,wEAAc,EAAE,EAAC,OAAO,EAAE,+DAAW,EAAE,QAAQ,EAAE,UAAU,EAAE;QAC7D,EAAC,OAAO,EAAE,sEAAiB,EAAE,QAAQ,EAAE,0FAAsB,EAAE,KAAK,EAAE,IAAI,EAAC,CAAC,YAT/E;YACP,4DAAY,CAAC,OAAO,CAAC,MAAM,CAAC;YAC5B,uEAAa;YACb,qEAAgB;YAChB,oEAAS;YACT,mEAAmB;YACnB,kEAAc;SACf;oIAKU,SAAS,mBAzBlB,2DAAY;QACZ,oGAAoB;QACpB,8HAA4B;QAC5B,mFAAe;QACf,6GAAuB;QACvB,kGAAmB;QACnB,qGAAoB;QACpB,0FAAiB;QACjB,iFAAc;QACd,qGAAoB;QACpB,qGAAoB;QACpB,wGAAqB,2EAIrB,uEAAa;QACb,qEAAgB;QAChB,oEAAS;QACT,mEAAmB;QACnB,kEAAc;;;;;;;;;;;;;;;;;;;;;;;;IC7EN,qEAA0D;IACtD,uEAA6H;IACzH,uDACJ;IAAA,4DAAI;IACR,4DAAK;;;IAHE,0DAA0F;IAA1F,yKAA0F;IACzF,0DACJ;IADI,+GACJ;;ACET,MAAM,4BAA4B;IAIvC,YAAoB,cAA6B;QAA7B,mBAAc,GAAd,cAAc,CAAe;IAAI,CAAC;IAEtD,QAAQ;QACN,IAAI,CAAC,qBAAqB,EAAE,CAAC;IAC/B,CAAC;IAED,qBAAqB;QAEnB,IAAI,CAAC,cAAc,CAAC,oBAAoB,EAAE,CAAC,SAAS,CAClD,IAAI,CAAC,EAAE;YACL,OAAO,CAAC,GAAG,CAAC,qBAAqB,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;YAC1D,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC;QAChC,CAAC,CACF,CAAC;IACJ,CAAC;;wGAlBU,4BAA4B;4GAA5B,4BAA4B;QDTzC,yEAAgD;QAC5C,yEAA4B;QACxB,wEAAsC;QAElC,sHAIK;QAET,4DAAK;QACT,4DAAM;QACV,4DAAM;;QAR0C,0DAAoB;QAApB,0FAAoB;;;;;;;;;;;;;;AEFpE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAoD;AACH;;;;;;AAS1C,MAAM,uBAAuB;IAIlC,YAAoB,cAA8B,EAC9B,WAAwB,EACxB,KAAqB;QAFrB,mBAAc,GAAd,cAAc,CAAgB;QAC9B,gBAAW,GAAX,WAAW,CAAa;QACxB,UAAK,GAAL,KAAK,CAAgB;QAJzC,YAAO,GAAa,IAAI,8DAAO,EAAE,CAAC;IAIW,CAAC;IAE9C,QAAQ;QACN,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,SAAS,CAAC,GAAE,EAAE;YAChC,IAAI,CAAC,oBAAoB,EAAE,CAAC;QAC9B,CAAC,CAAC;IACJ,CAAC;IAED,oBAAoB;QAClB,wEAAwE;QACxE,MAAM,YAAY,GAAW,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QAErE,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC,SAAS,CACpD,IAAI,CAAC,EAAE;YACL,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;QACtB,CAAC,CACF;IACH,CAAC;IAED,SAAS;QAEP,OAAO,CAAC,GAAG,CAAC,mBAAmB,IAAI,CAAC,OAAO,CAAC,IAAI,KAAK,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,CAAC,CAAC;QAC/E,MAAM,WAAW,GAAG,IAAI,iEAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAC/C,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC;IAE1C,CAAC;;8FA/BU,uBAAuB;uGAAvB,uBAAuB;QCZpC,yEAA6B;QACzB,yEAA+B;QAE3B,oEAAqD;QAErD,qEAAI;QAAA,uDAAkB;QAAA,4DAAK;QAC3B,yEAAmB;QAAA,uDAAwC;;QAAA,4DAAM;QACjE,4EAA6D;QAArD,+IAAS,eAAW,IAAC;QAAgC,sEAAW;QAAA,4DAAS;QAEjF,iEAAI;QACJ,sEAAI;QAAA,uEAAW;QAAA,4DAAK;QACpB,qEAAG;QAAA,wDAAyB;QAAA,4DAAI;QAEhC,wEAAyC;QAAA,gFAAoB;QAAA,4DAAI;QACrE,4DAAM;QACV,4DAAM;;QAZO,0DAA4B;QAA5B,6JAA4B;QAE7B,0DAAkB;QAAlB,iFAAkB;QACH,0DAAwC;QAAxC,8JAAwC;QAKxD,0DAAyB;QAAzB,wFAAyB;;;;;;;;;;;;;;ACTpC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAoD;;;;;;;;;;ICOpC,0EAA2D;IAEvD,0EAAyB;IACrB,wEAAiD;IACjD,qEAA6D;IAC7D,4DAAI;IAEJ,wEAAiD;IACjD,qEAAI;IAAA,uDAAoB;IAAA,4DAAK;IAC7B,4DAAI;IAEJ,0EAAmB;IAAA,uDAA6C;;IAAA,4DAAM;IACtE,8EAAwE;IAAhE,6WAAgC;IAAgC,uEAAW;IAAA,4DAAS;IAChG,4DAAM;IAEV,4DAAM;;;IAZK,0DAA6C;IAA7C,uHAA6C;IAC3C,0DAAgC;IAAhC,gKAAgC;IAGlC,0DAA6C;IAA7C,uHAA6C;IAC5C,0DAAoB;IAApB,oFAAoB;IAGL,0DAA6C;IAA7C,iKAA6C;;;IAOxE,0EAAyF;IACrF,+EACJ;IAAA,4DAAM;;ADjBf,MAAM,oBAAoB;IAc/B,YACU,cAA8B,EAC9B,WAAwB,EACxB,KAAqB;QAFrB,mBAAc,GAAd,cAAc,CAAgB;QAC9B,gBAAW,GAAX,WAAW,CAAa;QACxB,UAAK,GAAL,KAAK,CAAgB;QAhB/B,aAAQ,GAAc,EAAE,CAAC;QACzB,sBAAiB,GAAW,CAAC,CAAC;QAC9B,uBAAkB,GAAW,CAAC,CAAC;QAC/B,eAAU,GAAY,KAAK,CAAC;QAC5B,wBAAmB,GAAW,EAAE,CAAC;QAEjC,+BAA+B;QAC/B,kBAAa,GAAW,CAAC,CAAC;QAC1B,gBAAW,GAAW,CAAC,CAAC;QACxB,qBAAgB,GAAW,CAAC,CAAC;QAE7B,oBAAe,GAAW,IAAI,CAAC;IAM5B,CAAC;IAEJ,QAAQ;QACN,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,SAAS,CAAC,GAAG,EAAE;YACjC,IAAI,CAAC,YAAY,EAAE,CAAC;QACtB,CAAC,CAAC,CAAC;IACL,CAAC;IAED,YAAY;QACV,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;QAE9D,IAAI,IAAI,CAAC,UAAU,EAAE;YACnB,IAAI,CAAC,oBAAoB,EAAE,CAAC;SAC7B;aAAM;YACL,IAAI,CAAC,kBAAkB,EAAE,CAAC;SAC3B;IACH,CAAC;IAED,oBAAoB;QAClB,MAAM,UAAU,GAAW,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;QAEvE,8CAA8C;QAC9C,6BAA6B;QAE7B,IAAI,IAAI,CAAC,eAAe,IAAI,UAAU,EAAE;YACtC,IAAI,CAAC,aAAa,GAAG,CAAC,CAAC;SACxB;QAED,IAAI,CAAC,eAAe,GAAG,UAAU,CAAC;QAElC,OAAO,CAAC,GAAG,CAAC,WAAW,UAAU,mBAAmB,IAAI,CAAC,aAAa,EAAE,CAAC,CAAC;QAE1E,2CAA2C;QAC3C,IAAI,CAAC,cAAc;aAChB,sBAAsB,CACrB,IAAI,CAAC,aAAa,GAAG,CAAC,EACtB,IAAI,CAAC,WAAW,EAChB,UAAU,CACX;aACA,SAAS,CAAC,IAAI,CAAC,aAAa,EAAE,CAAC,CAAC;IACrC,CAAC;IAED,kBAAkB;QAChB,sCAAsC;QACtC,MAAM,aAAa,GAAY,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QAEtE,IAAI,aAAa,EAAE;YACjB,kEAAkE;YAClE,IAAI,CAAC,iBAAiB,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;YAEjE,8BAA8B;YAC9B,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAE,CAAC;SACtE;aAAM;YACL,iDAAiD;YACjD,IAAI,CAAC,iBAAiB,GAAG,CAAC,CAAC;YAC3B,IAAI,CAAC,mBAAmB,GAAG,OAAO,CAAC;SACpC;QAED,EAAE;QACF,mDAAmD;QACnD,sEAAsE;QAEtE,kDAAkD;QAClD,kCAAkC;QAClC,IAAI,IAAI,CAAC,kBAAkB,IAAI,IAAI,CAAC,iBAAiB,EAAE;YACrD,IAAI,CAAC,aAAa,GAAG,CAAC,CAAC;SACxB;QAED,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,iBAAiB,CAAC;QAEjD,OAAO,CAAC,GAAG,CACT,qBAAqB,IAAI,CAAC,iBAAiB,qBAAqB,IAAI,CAAC,aAAa,EAAE,CACrF,CAAC;QAEF,gDAAgD;QAChD,IAAI,CAAC,cAAc;aAChB,sBAAsB,CACrB,IAAI,CAAC,aAAa,GAAG,CAAC,EACtB,IAAI,CAAC,WAAW,EAChB,IAAI,CAAC,iBAAiB,CACvB;aACA,SAAS,CAAC,IAAI,CAAC,aAAa,EAAE,CAAC,CAAC;IACrC,CAAC;IACD,aAAa;QACX,OAAO,CAAC,IAAI,EAAE,EAAE;YACd,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC;YACxC,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC;YAC1C,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC;YAClC,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC;QAClD,CAAC,CAAC;IACJ,CAAC;IAED,cAAc,CAAC,QAAgB;QAC7B,IAAI,CAAC,WAAW,GAAG,QAAQ,CAAC;QAC5B,IAAI,CAAC,aAAa,GAAG,CAAC,CAAC;QACvB,IAAI,CAAC,YAAY,EAAE,CAAC;IACtB,CAAC;IAED,SAAS,CAAC,UAAmB;QAC3B,OAAO,CAAC,GAAG,CAAC,mBAAmB,UAAU,CAAC,IAAI,KAAK,UAAU,CAAC,SAAS,EAAE,CAAC,CAAC;QAE3E,uBAAuB;QACvB,MAAM,WAAW,GAAG,IAAI,iEAAQ,CAAC,UAAU,CAAC,CAAC;QAE7C,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC;IAC1C,CAAC;;wFA3HU,oBAAoB;oGAApB,oBAAoB;QCZjC,yEAA0B;QACtB,yEAAiD;QAC7C,qEAAI;QAAA,uDAAiC;QAAA,4DAAK;QAC1C,gEAAI;QACJ,yEAA6B;QACzB,yEAAiB;QAIb,iHAeM;QAGN,gHAEM;QAEV,4DAAM;QAGN,yEAA+B;QAC3B,0EAAiB;QACb,qEAA4B;QAC5B,0EAAsB;QAClB,0EAAiB;QACb,0EAAkD;QAC9C,qFAKgD;QALhC,mMAA0B,uGAKV,kBAAc,IALJ;QAO1C,4DAAiB;QACrB,4DAAM;QAEN,2EAAsD;QAClD,4EAAmB;QAAA,qEAAS;QAAA,4DAAO;QAEnC,8EAAwD;QAAhD,qJAAW,uCAAmC,IAAC;QACnD,0EAAQ;QAAA,6DAAC;QAAA,4DAAS;QAClB,8EAAwB;QAAA,6DAAC;QAAA,4DAAS;QAClC,0EAAQ;QAAA,8DAAE;QAAA,4DAAS;QACnB,0EAAQ;QAAA,8DAAE;QAAA,4DAAS;QACnB,0EAAQ;QAAA,8DAAE;QAAA,4DAAS;QACvB,4DAAS;QACb,4DAAM;QAEV,4DAAM;QACV,4DAAM;QACV,4DAAM;QACV,4DAAM;QAEV,4DAAM;QACV,4DAAM;QACV,4DAAM;;QAnEM,0DAAiC;QAAjC,2GAAiC;QAOA,0DAAW;QAAX,iFAAW;QAkBlC,0DAA2B;QAA3B,0HAA2B;QAaD,0DAA0B;QAA1B,mFAA0B;;;;;;;;;;;;;;ACtC1E;AAAA;AAAA;AAAA;AAAgD;;AAKzC,MAAM,WAAW;IAQtB,mCAAmC;IAEnC;QARA,cAAS,GAAe,EAAE,CAAC;QAE3B,eAAU,GAAoB,IAAI,oDAAe,CAAS,CAAC,CAAC,CAAC;QAC7D,kBAAa,GAAoB,IAAI,oDAAe,CAAS,CAAC,CAAC,CAAC;QAEhE,YAAO,GAAY,cAAc,CAAC;QAK9B,yBAAyB;QACzB,IAAI,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC;QAEzD,IAAI,IAAI,IAAI,IAAI,EAAE;YAChB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;YAEtB,6DAA6D;YAC7D,IAAI,CAAC,iBAAiB,EAAE,CAAC;SAC1B;IAEL,CAAC;IAED,SAAS,CAAC,WAAqB;QAE7B,gDAAgD;QAChD,IAAI,mBAAmB,GAAY,KAAK,CAAC;QACzC,IAAI,gBAAgB,GAAa,SAAS,CAAC;QAE3C,IAAI,IAAI,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,EAAE;YAC7B,6CAA6C;YAE7C,gBAAgB,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAE,YAAY,CAAC,EAAE,CAAC,YAAY,CAAC,EAAE,KAAK,WAAW,CAAC,EAAE,CAAE,CAAC;YAE7F,uBAAuB;YACvB,mBAAmB,GAAG,CAAC,gBAAgB,IAAI,SAAS,CAAC,CAAC;SACvD;QAED,IAAI,mBAAmB,EAAE;YACvB,yBAAyB;YACzB,gBAAgB,CAAC,QAAQ,EAAE,CAAC;SAC7B;aACI;YACH,iCAAiC;YACjC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;SAClC;QAED,8CAA8C;QAC9C,IAAI,CAAC,iBAAiB,EAAE,CAAC;IAC3B,CAAC;IAED,iBAAiB;QAEf,IAAI,eAAe,GAAW,CAAC,CAAC;QAChC,IAAI,kBAAkB,GAAW,CAAC,CAAC;QAEnC,KAAK,IAAI,eAAe,IAAI,IAAI,CAAC,SAAS,EAAE;YAC1C,eAAe,IAAI,eAAe,CAAC,QAAQ,GAAG,eAAe,CAAC,SAAS,CAAC;YACxE,kBAAkB,IAAI,eAAe,CAAC,QAAQ,CAAC;SAChD;QAED,uEAAuE;QACvE,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;QACtC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;QAE5C,4CAA4C;QAC5C,IAAI,CAAC,WAAW,CAAC,eAAe,EAAE,kBAAkB,CAAC,CAAC;QAEtD,oBAAoB;QACpB,IAAI,CAAC,gBAAgB,EAAE,CAAC;IAC1B,CAAC;IAED,gBAAgB;QACd,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,WAAW,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;IACpE,CAAC;IAED,WAAW,CAAC,eAAuB,EAAE,kBAA0B;QAE7D,OAAO,CAAC,GAAG,CAAC,sBAAsB,CAAC,CAAC;QACpC,KAAK,IAAI,YAAY,IAAI,IAAI,CAAC,SAAS,EAAE;YACvC,MAAM,aAAa,GAAG,YAAY,CAAC,QAAQ,GAAG,YAAY,CAAC,SAAS,CAAC;YACrE,OAAO,CAAC,GAAG,CAAC,SAAS,YAAY,CAAC,IAAI,cAAc,YAAY,CAAC,QAAQ,eAAe,YAAY,CAAC,SAAS,mBAAmB,aAAa,EAAE,CAAC,CAAC;SACnJ;QAED,OAAO,CAAC,GAAG,CAAC,eAAe,eAAe,CAAC,OAAO,CAAC,CAAC,CAAC,oBAAoB,kBAAkB,EAAE,CAAC,CAAC;QAC/F,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;IACtB,CAAC;IAED,iBAAiB,CAAC,WAAqB;QAErC,WAAW,CAAC,QAAQ,EAAE,CAAC;QAEvB,IAAI,WAAW,CAAC,QAAQ,KAAK,CAAC,EAAE;YAC9B,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;SAC1B;aACI;YACH,IAAI,CAAC,iBAAiB,EAAE,CAAC;SAC1B;IACH,CAAC;IAED,MAAM,CAAC,WAAqB;QAE1B,iCAAiC;QACjC,MAAM,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,SAAS,CAAE,YAAY,CAAC,EAAE,CAAC,YAAY,CAAC,EAAE,KAAK,WAAW,CAAC,EAAE,CAAE,CAAC;QAEjG,8DAA8D;QAC9D,IAAI,SAAS,GAAG,CAAC,CAAC,EAAE;YAClB,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC;YAEpC,IAAI,CAAC,iBAAiB,EAAE,CAAC;SAC1B;IACH,CAAC;;sEAhHU,WAAW;8FAAX,WAAW,WAAX,WAAW,mBAFV,MAAM;;;;;;;;;;;;;ACFpB;AAAA;AAAA;AAAA;AAAA;AAA2D;;;AAMpD,MAAM,YAAY;IAIvB,YAAoB,UAAsB;QAAtB,eAAU,GAAV,UAAU,CAAY;QAFlC,aAAQ,GAAG,wEAAW,CAAC,UAAU,GAAG,WAAW,CAAC;IAEV,CAAC;IAE/C,QAAQ,CAAC,OAAkB;QACzB,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,OAAO,EAAE,EAAC,YAAY,EAAE,MAAM,EAAC,CAAC,CAAC,SAAS,EAAE,CAAC;IAC1F,CAAC;;wEARU,YAAY;+FAAZ,YAAY,WAAZ,YAAY,mBAFX,MAAM;;;;;;;;;;;;;;;;;;;;;;ICQA,qEAAwD;IACpD,qEAAI;IACA,uDACJ;IAAA,4DAAK;IAEL,qEAAI;IACA,uDACJ;;IAAA,4DAAK;IAEL,qEAAI;IACA,uDACJ;IAAA,4DAAK;IAEL,qEAAI;IACA,uDACJ;;IAAA,4DAAK;IACT,4DAAK;;;IAdG,0DACJ;IADI,mHACJ;IAGI,0DACJ;IADI,kLACJ;IAGI,0DACJ;IADI,6GACJ;IAGI,0DACJ;IADI,uLACJ;;;IAxBZ,sEAA2C;IACvC,2EAAoC;IAChC,qEAAI;IACA,wEAAkB;IAAA,gFAAqB;IAAA,4DAAK;IAC5C,wEAAkB;IAAA,sEAAW;IAAA,4DAAK;IAClC,wEAAkB;IAAA,yEAAc;IAAA,4DAAK;IACrC,wEAAkB;IAAA,gEAAI;IAAA,4DAAK;IAC/B,4DAAK;IAEL,yHAgBK;IAET,4DAAQ;IACZ,4DAAM;;;IAnBqC,2DAAmB;IAAnB,4FAAmB;;;IAsB9D,yEAA+F;IAC3F,6EACJ;IAAA,4DAAM;;AC9BX,MAAM,qBAAqB;IAKhC,YAAoB,mBAAwC;QAAxC,wBAAmB,GAAnB,mBAAmB,CAAqB;QAH5D,qBAAgB,GAAmB,EAAE,CAAC;QACtC,YAAO,GAAY,cAAc,CAAC;IAE8B,CAAC;IAEjE,QAAQ;QACN,IAAI,CAAC,kBAAkB,EAAE,CAAC;IAC5B,CAAC;IAED,kBAAkB;QAEhB,wDAAwD;QACxD,MAAM,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC;QAE/D,gCAAgC;QAChC,IAAI,CAAC,mBAAmB,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC,SAAS,CAC1D,IAAI,CAAC,EAAE;YACL,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC;QAChD,CAAC,CACF,CAAC;IACJ,CAAC;;0FAtBU,qBAAqB;qGAArB,qBAAqB;QDTlC,yEAA0B;QAEtB,yEAAiD;QAC7C,yEAA6B;QACzB,qEAAI;QAAA,sEAAW;QAAA,4DAAK;QAEpB,kHA4BM;QAGN,iHAEM;QAEV,4DAAM;QAEV,4DAAM;QACV,4DAAM;;QAtCY,0DAAmC;QAAnC,iGAAmC;QA+BnC,0DAAoC;QAApC,kGAAoC;;;;;;;;;;;;;;AErCtD;AAAe;IAEX,IAAI,EAAE;QACF,QAAQ,EAAE,sBAAsB;QAChC,MAAM,EAAE,8CAA8C;QACtD,WAAW,EAAE,uCAAuC;QACpD,MAAM,EAAE,CAAC,QAAQ,EAAE,SAAS,EAAE,OAAO,CAAC;KACzC;CACJ;;;;;;;;;;;;;;;;;;;;;ACLuC;AACmB;;;AAKpD,MAAM,sBAAsB;IAEjC,YAAoB,QAAyB;QAAzB,aAAQ,GAAR,QAAQ,CAAiB;IAAI,CAAC;IAElD,SAAS,CAAC,OAAyB,EAAE,IAAiB;QACpD,OAAO,iDAAI,CAAC,IAAI,CAAC,YAAY,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC,CAAC;IAChD,CAAC;IAEa,YAAY,CAAC,OAAyB,EAAE,IAAiB;;YAErE,iDAAiD;YACjD,MAAM,WAAW,GAAI,wEAAW,CAAC,UAAU,GAAG,SAAS,CAAC;YACxD,MAAM,gBAAgB,GAAG,CAAC,WAAW,CAAC,CAAC;YACvC,0FAA0F;YAE1F,IAAI,gBAAgB,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,aAAa,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,EAAE;gBAErE,mBAAmB;gBACnB,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,cAAc,EAAE,CAAC;gBAEzD,yDAAyD;gBACzD,OAAO,GAAG,OAAO,CAAC,KAAK,CAAC;oBACtB,UAAU,EAAE;wBACV,aAAa,EAAE,SAAS,GAAG,WAAW;qBACvC;iBACF,CAAC,CAAC;aAEJ;YAED,OAAO,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,SAAS,EAAE,CAAC;QAC1C,CAAC;KAAA;;4FA9BU,sBAAsB;yGAAtB,sBAAsB,WAAtB,sBAAsB,mBAFrB,MAAM;;;;;;;;;;;;;ACPpB;AAAA;AAAO,MAAM,SAAS;CAMrB;;;;;;;;;;;;;;;;;;;;;;;;ICJG,yEAA8E;IAC1E,uDACJ;IAAA,4DAAM;;;IADF,0DACJ;IADI,6GACJ;;;IAEA,4EAA8E;IAAA,gEAAK;IAAA,4DAAS;;;;IAE5F,4EAA4E;IAA1C,wTAAoB;IAAsB,iEAAM;IAAA,4DAAS;;;IAE3F,4EAAoF;IAAA,iEAAM;IAAA,4DAAS;;;IAEnG,6EAA0F;IAAA,iEAAM;IAAA,4DAAS;;ACJtG,MAAM,oBAAoB;IAO/B,YAAoB,eAAgC;QAAhC,oBAAe,GAAf,eAAe,CAAiB;QALpD,oBAAe,GAAY,KAAK,CAAC;QAGjC,YAAO,GAAY,cAAc,CAAC;IAEsB,CAAC;IAEzD,QAAQ;QAEN,2CAA2C;QAC3C,IAAI,CAAC,eAAe,CAAC,oBAAoB,CAAC,SAAS,CACjD,CAAC,MAAM,EAAE,EAAE;YACT,IAAI,CAAC,eAAe,GAAG,MAAM,CAAC;YAC9B,IAAI,CAAC,cAAc,EAAE,CAAC;QACxB,CAAC,CACF,CAAC;IACJ,CAAC;IAED,cAAc;QACZ,IAAI,IAAI,CAAC,eAAe,EAAC;YAEvB,kDAAkD;YAClD,EAAE;YACF,8CAA8C;YAC9C,IAAI,CAAC,eAAe,CAAC,OAAO,EAAE,CAAC,IAAI,CACjC,CAAC,GAAG,EAAE,EAAE;gBACN,IAAI,CAAC,YAAY,GAAG,GAAG,CAAC,IAAI,CAAC;gBAE7B,uDAAuD;gBACvD,MAAM,QAAQ,GAAG,GAAG,CAAC,KAAK,CAAC;gBAE3B,wCAAwC;gBACxC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,WAAW,EAAE,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC;YAC9D,CAAC,CACF,CAAC;SACH;IACH,CAAC;IAED,MAAM;QACJ,2DAA2D;QAC3D,IAAI,CAAC,eAAe,CAAC,OAAO,EAAE,CAAC;IACjC,CAAC;;wFA3CU,oBAAoB;oGAApB,oBAAoB;QDRjC,yEAAiC;QAE7B,gHAEM;QAEN,sHAA4F;QAE5F,sHAA2F;QAE3F,sHAAmG;QAEnG,sHAAyG;QAE7G,4DAAM;;QAZI,0DAAuC;QAAvC,yGAAuC;QAIpC,0DAAwB;QAAxB,sFAAwB;QAExB,0DAAuB;QAAvB,qFAAuB;QAEvB,0DAAuB;QAAvB,qFAAuB;QAEvB,0DAAuB;QAAvB,qFAAuB;;;;;;;;;;;;;;AEVpC;AAAA;AAAO,MAAM,kBAAkB;IAE3B,uBAAuB;IACvB,MAAM,CAAC,iBAAiB,CAAC,OAAoB;QAEzC,4CAA4C;QAC5C,IAAG,CAAC,OAAO,CAAC,KAAK,IAAI,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,MAAM,KAAG,CAAC,CAAC,EAAC;YAE5D,6BAA6B;YAC7B,OAAO,EAAC,mBAAmB,EAAE,IAAI,EAAC,CAAC;SACtC;aACG;YACC,oBAAoB;YACzB,OAAO,IAAI,CAAC;SACX;IACL,CAAC;CACJ;;;;;;;;;;;;;;;;;;;AClB8C;AAGF;AACY;AAEzD,IAAI,qEAAW,CAAC,UAAU,EAAE;IAC1B,oEAAc,EAAE,CAAC;CAClB;AAED,2EAAwB,CAAC,eAAe,CAAC,yDAAS,CAAC;KAChD,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;;;;;;;;;;;;ACXpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA,4CAA4C,WAAW;AACvD;AACA;AACA,qC","file":"main.js","sourcesContent":["<div class=\"main-content\">\r\n    <div class=\"section-content section-content-p30\">\r\n        <div class=\"cotainer-fluid\">\r\n\r\n            <div *ngIf=\"cartItems.length > 0\">\r\n\r\n            <table class=\"table table-bordered\">\r\n                <tr>\r\n                    <th width=\"20%\">Product Image</th>\r\n                    <th width=\"50%\">Product Detail</th>\r\n                    <th width=\"30%\"></th>\r\n                </tr>\r\n                \r\n                <tr *ngFor=\"let tempCartItem of cartItems \">\r\n                    <td>\r\n                        <img src=\"{{tempCartItem.imageUrl }}\" class=\"img-responsive\" width=\"150px\">\r\n                    </td> \r\n                    <td>\r\n                        <p>{{ tempCartItem.name }}</p>\r\n                        <p>{{ tempCartItem.unitPrice | currency: 'USD' }}</p>\r\n                    </td>\r\n                    <td>\r\n                        <div class=\"items\">\r\n                            <label>Quantity:</label> \r\n                           \r\n                            <div class=\"row no-gutters\"> \r\n                                <div class=\"col\">\r\n                                    <button (click)=\"decrementQuantity(tempCartItem)\" class=\"btn btn-primary btn-sm\">\r\n                                        <i class=\"fas fa-minus\"></i>\r\n                                    </button>\r\n                                </div>\r\n\r\n                                <div class=\"col ml-4 mr-2\">\r\n                                    {{ tempCartItem.quantity }}\r\n                                </div>\r\n\r\n                                <div class=\"col\">\r\n                                    <button (click)=\"incrementQuantity(tempCartItem)\" class=\"btn btn-primary btn-sm\">\r\n                                        <i class=\"fas fa-plus\"></i>\r\n                                    </button>\r\n                                </div>\r\n\r\n                                <div class=\"col-4\"></div>\r\n                            </div>\r\n                            \r\n                            <button (click)=\"remove(tempCartItem)\" class=\"btn btn-primary btn-sm mt-2\"> Remove </button>\r\n                        </div>\r\n\r\n                        <p class=\"mt-2\">Subtotal: {{ tempCartItem.quantity * tempCartItem.unitPrice | currency: 'USD'}}</p>\r\n                    </td>\r\n                </tr> \r\n\r\n                <tr>\r\n                    <td colspan=\"2\"></td>\r\n                    <td style=\"font-weight: bold\">\r\n                    <p>Total Quantity: {{totalQuantity}}</p>\r\n                    <p>Shipping Fee: Free</p> \r\n                    <p>Total Price: {{totalPrice | currency: \"USD\"}}</p>   \r\n                    </td>\r\n                   \r\n                </tr>\r\n                <tr>\r\n                    <td colspan=\"2\"></td>\r\n                    <a routerLink = \"/checkout\"  class=\"btn btn-primary\" role=\"button\">Checkout</a>\r\n                </tr>\r\n\r\n            </table>\r\n\r\n            </div>\r\n\r\n            <!-- if cart is empty then display a message-->\r\n            <div *ngIf =\"cartItems.length == 0\" class=\"alert alert-warning col-md-12\" role=\"alert\">\r\n                Your shopping cart is empty.\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>","import { Component, OnInit } from '@angular/core';\r\nimport { CartItem } from 'src/app/common/cart-item';\r\nimport { CartService } from 'src/app/services/cart.service';\r\n\r\n@Component({\r\n  selector: 'app-cart-details',\r\n  templateUrl: './cart-details.component.html',\r\n  styleUrls: ['./cart-details.component.css']\r\n})\r\nexport class CartDetailsComponent implements OnInit {\r\n\r\n  cartItems: CartItem[] = [];\r\n  totalPrice: number = 0;\r\n  totalQuantity: number = 0;\r\n\r\n  constructor(private cartService: CartService) { }\r\n\r\n  ngOnInit(): void {\r\n    this.listCartDetails();\r\n  }\r\n  listCartDetails() {\r\n   \r\n    //get a handle to the cart items\r\n    this.cartItems = this.cartService.cartItems;\r\n\r\n    //subscribe to the cart totalPrice\r\n    this.cartService.totalPrice.subscribe(\r\n      data => this.totalPrice = data\r\n    );\r\n\r\n    //subscribe to the cart totalQuantity\r\n    this.cartService.totalQuantity.subscribe(\r\n      data => this.totalQuantity = data\r\n    );\r\n    //compute cart total price and quantity\r\n      this.cartService.computeCartTotals();\r\n  }\r\n\r\n  incrementQuantity(theCartItem: CartItem){\r\n    this.cartService.addToCart(theCartItem);\r\n  }\r\n\r\n  decrementQuantity(theCartItem: CartItem){\r\n    this.cartService.decrementQuantity(theCartItem);\r\n  }\r\n\r\n  remove(theCartItem: CartItem){\r\n    this.cartService.remove(theCartItem);\r\n  }\r\n}\r\n","export class Order {\r\n\r\n    totalQuantity: number;\r\n    totalPrice: number;\r\n}\r\n\r\n","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false,\r\n  backendApi: \"https://localhost:8443/api\",\r\n  stripePublishableKey: \"pk_test_51PYJnRDCEXvxV8x3ooK7vHxWR7j9cIcuL2O5mnsDTBIK0QQe557OHWLeWsa6MbpWHzHDO0giAYcmb8NEcCvH05nV007poU88qT\"\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import { Address } from \"./address\";\r\nimport { Customer } from \"./customer\";\r\nimport { Order } from \"./order\";\r\nimport { OrderItem } from \"./order-item\";\r\n\r\nexport class Purchase {\r\n    customer: Customer;\r\n    shippingAddress: Address;\r\n    billingAddress: Address;\r\n    order: Order;\r\n    orderItems: OrderItem[];\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-members-page',\r\n  templateUrl: './members-page.component.html',\r\n  styleUrls: ['./members-page.component.css']\r\n})\r\nexport class MembersPageComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n","<div class=\"main-content\">\r\n\r\n    <div align = \"center\" class=\"alert alert-warning col-md-12\" role=\"alert\">\r\n        <h3>Members Special</h3>\r\n\r\n        <p>Thank You for being a member.</p>\r\n\r\n        <p>Member discounts are coming soon!</p>\r\n\r\n    </div>\r\n</div>","import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { Product } from '../common/product';\r\nimport { map } from 'rxjs/operators';\r\nimport { ProductCategory } from '../common/product-category';\r\nimport { environment } from 'src/environments/environment';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ProductService {\r\n  \r\n  private baseUrl = environment.backendApi + '/products';\r\n  private categoryUrl = environment.backendApi+ '/product-category';\r\n\r\n  // private baseUrl = 'https://ecommerce-backend-deploy.herokuapp.com/api/products';\r\n  // private categoryUrl = 'https://ecommerce-backend-deploy.herokuapp.com/api/product-category'; \r\n\r\n  constructor(private httpClient: HttpClient) { }\r\n\r\n  getProduct(theProductId: number): Observable<Product> {\r\n    //need to build URL based on product id\r\n    const productUrl = `${this.baseUrl}/${theProductId}`;\r\n\r\n    return this.httpClient.get<Product>(productUrl);\r\n  }\r\n\r\n  getProductListPaginate(thePage: number, \r\n                         thePageSize: number,\r\n                         theCategoryId: number): Observable<GetResponseProducts>{\r\n\r\n    //need to build URL based on category id, page and page size\r\n    const searchUrl = `${this.baseUrl}/search/findByCategoryId?id=${theCategoryId}`\r\n                      + `&page=${thePage}&size=${thePageSize}`;\r\n\r\n    return this.httpClient.get<GetResponseProducts>(searchUrl);\r\n  }\r\n\r\n  getProductList(theCategoryId: number): Observable<Product[]>{\r\n    //need to build URL based on category id\r\n    const searchUrl = `${this.baseUrl}/search/findByCategoryId?id=${theCategoryId}`;\r\n    return this.getProducts(searchUrl);\r\n  }\r\n\r\n  searchProducts(theKeyword: string): Observable<Product[]> {\r\n     //need to build URL based on keyword\r\n     const searchUrl = `${this.baseUrl}/search/findByNameContaining?name=${theKeyword}`;\r\n     return this.getProducts(searchUrl);\r\n  }\r\n\r\n  searchProductsPaginate( thePage: number, \r\n                          thePageSize: number,\r\n                          theKeyword: string): Observable<GetResponseProducts>{\r\n\r\n    //need to build URL based on keyword, page and page size\r\n    const searchUrl = `${this.baseUrl}/search/findByNameContaining?name=${theKeyword}`\r\n                        + `&page=${thePage}&size=${thePageSize}`;\r\n\r\n    return this.httpClient.get<GetResponseProducts>(searchUrl);\r\n  }\r\n\r\n  private getProducts(searchUrl: string): Observable<Product[]> {\r\n    return this.httpClient.get<GetResponseProducts>(searchUrl).pipe(\r\n      map(response => response._embedded.products)\r\n    );\r\n  }\r\n\r\n  getProductCategories(): Observable<ProductCategory[]> {\r\n    return this.httpClient.get<GetResponseProductCategory>(this.categoryUrl).pipe(\r\n      map(response => response._embedded.productCategory)\r\n      );\r\n  }\r\n}\r\n\r\ninterface GetResponseProducts{\r\n  _embedded:{\r\n    products: Product[]; \r\n  },\r\n  page:{\r\n    size: number,\r\n    totalElements: number,\r\n    totalPages: number,\r\n    number: number \r\n  }\r\n}\r\n\r\ninterface GetResponseProductCategory{\r\n  _embedded:{\r\n    productCategory: ProductCategory[]; \r\n  }\r\n}","import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable, of } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { Country } from '../common/country';\r\nimport { State } from '../common/state';\r\nimport { environment } from 'src/environments/environment';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class Luv2ShopFormService {\r\n\r\n  private countriesUrl = environment.backendApi + '/countries';\r\n  private statesUrl = environment.backendApi + '/states';\r\n\r\n  // private countriesUrl = 'https://ecommerce-backend-deploy.herokuapp.com/api/countries';\r\n  // private statesUrl = 'https://ecommerce-backend-deploy.herokuapp.com/api/states';\r\n\r\n  constructor(private httpClient: HttpClient) { }\r\n\r\n  getCountries(): Observable<Country[]>{\r\n\r\n    return this.httpClient.get<GetResponseCountries>(this.countriesUrl).pipe(\r\n      map(response => response._embedded.countries)\r\n    );\r\n  }\r\n\r\n  getStates(theCountryCode: string): Observable<State[]>{\r\n\r\n    //search Url\r\n    const searchStateUrl = `${this.statesUrl}/search/findByCountryCode?code=${theCountryCode}`;\r\n\r\n    return this.httpClient.get<GetResponseStates>(searchStateUrl).pipe(\r\n      map(response => response._embedded.states)\r\n    );\r\n  }\r\n\r\n  getCreditCardMonths(startMonth: number): Observable<number[]>{\r\n\r\n    let data: number[] = [];\r\n\r\n    //build an array for \"Month\" dropdown list\r\n    //- start at current month and loop until\r\n\r\n    for (let theMonth = startMonth; theMonth <= 12; theMonth++){\r\n      data.push(theMonth);\r\n    }\r\n\r\n    return of(data);\r\n  }\r\n\r\ngetCreditCardYears(): Observable<number[]>{\r\n\r\n  let data: number[] = [];\r\n\r\n  //build an array for \"Year\" dropdown list\r\n  //- start at current year and loop for next 10 years\r\n\r\n  const startYear: number = new Date().getFullYear();\r\n  const endYear: number = startYear + 10;\r\n\r\n  for (let theYear = startYear; theYear <= endYear; theYear++){\r\n    data.push(theYear);\r\n  }\r\n\r\n    return of(data);\r\n}\r\n\r\n}\r\n\r\ninterface GetResponseCountries{\r\n  _embedded: {\r\n    countries: Country[];\r\n  }\r\n}\r\n\r\ninterface GetResponseStates{\r\n  _embedded: {\r\n    states: State[];\r\n  }\r\n}","export class PaymentInfo {\n    amount: number;\n    currency: string;\n    receiptEmail: string;\n}\n","import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { OrderHistory } from '../common/order-history';\r\nimport { environment } from 'src/environments/environment';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class OrderHistoryService {\r\n\r\n  private orderUrl = environment.backendApi + '/orders';\r\n  // private orderUrl = 'https://ecommerce-backend-deploy.herokuapp.com/api/orders';\r\n\r\n  constructor(private httpClient: HttpClient) { }\r\n\r\n  getOrderHistory(theEmail: string): Observable<GetResponseOrderHistory>{\r\n    \r\n    //need to build URL based on the customer email\r\n    const orderHistoryUrl = `${this.orderUrl}/search/findByCustomerEmailOrderByDateCreatedDesc?email=${theEmail}`;\r\n\r\n    return this.httpClient.get<GetResponseOrderHistory>(orderHistoryUrl);\r\n  }\r\n}\r\n\r\ninterface GetResponseOrderHistory{\r\n  _embedded:{\r\n    orders: OrderHistory[];\r\n  }\r\n}\r\n","import { Product } from \"./product\";\r\n\r\nexport class CartItem {\r\n\r\n    id: string;\r\n    name: string;\r\n    imageUrl: string;\r\n    unitPrice: number;\r\n\r\n    quantity: number;\r\n\r\n    constructor(product: Product){\r\n        this.id = product.id;\r\n        this.name = product.name;\r\n        this.imageUrl = product.imageUrl;\r\n        this.unitPrice = product.unitPrice;\r\n\r\n        this.quantity = 1;\r\n    }\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { Country } from 'src/app/common/country';\r\nimport { Order } from 'src/app/common/order';\r\nimport { OrderItem } from 'src/app/common/order-item';\r\nimport { Purchase } from 'src/app/common/purchase';\r\nimport { State } from 'src/app/common/state';\r\nimport { Address } from 'src/app/common/address';\r\nimport { CartService } from 'src/app/services/cart.service';\r\nimport { CheckoutService } from 'src/app/services/checkout.service';\r\nimport { Luv2ShopFormService } from 'src/app/services/luv2-shop-form.service';\r\nimport { Luv2ShopValidators } from 'src/app/validators/luv2-shop-validators';\r\nimport { environment } from 'src/environments/environment';\r\nimport { PaymentInfo } from 'src/app/common/payment-info';\r\nimport { EmailService } from 'src/app/services/email.service';\r\nimport { EmailInfo } from 'src/app/common/email-info';\r\n\r\n@Component({\r\n  selector: 'app-checkout',\r\n  templateUrl: './checkout.component.html',\r\n  styleUrls: ['./checkout.component.css']\r\n})\r\nexport class CheckoutComponent implements OnInit {\r\n\r\n  checkoutFormGroup: FormGroup;\r\n\r\n  totalPrice: number = 0;\r\n  totalQuantity: number = 0;\r\n\r\n  creditCardYears: number[] = [];\r\n  creditCardMonths: number[] = [];\r\n\r\n  countries: Country[] = [];\r\n\r\n  shippingAddressStates: State[] = [];\r\n  billingAddressStates: State[] = [];\r\n\r\n  storage: Storage = sessionStorage;\r\n\r\n  //initialize Stripe api\r\n  stripe = Stripe(environment.stripePublishableKey);\r\n\r\n  paymentInfo: PaymentInfo = new PaymentInfo();\r\n  emailInfo: EmailInfo = new EmailInfo();\r\n  cardElement:any;\r\n  displayError: any = \"\";\r\n\r\n  isDisabled: boolean = false;\r\n\r\n  constructor(private formBuilder: FormBuilder,\r\n              private luv2ShopFormService: Luv2ShopFormService,\r\n              private cartService: CartService,\r\n              private checkoutService: CheckoutService,\r\n              private emailService: EmailService,\r\n              private router: Router) { }\r\n\r\n  ngOnInit(): void {\r\n    //setup Stripe payment form\r\n    this.setupStripePaymentForm();\r\n    this.reviewCartDetails();\r\n\r\n    //read the user's email address from browser storage\r\n    const theEmail = JSON.parse(this.storage.getItem('userEmail'));\r\n\r\n    this.checkoutFormGroup = this.formBuilder.group({\r\n      customer: this.formBuilder.group({\r\n        firstName: new FormControl('',\r\n                                  [ Validators.required, \r\n                                    Validators.minLength(2), \r\n                                    Luv2ShopValidators.notOnlyWhitespace]),\r\n        lastName: new FormControl('',\r\n                                  [Validators.required, \r\n                                   Validators.minLength(2),\r\n                                   Luv2ShopValidators.notOnlyWhitespace]),\r\n        email: new FormControl(theEmail,\r\n                              [Validators.required,Validators.pattern('^[a-z0-9._%+-]+@[a-z0-9.-]+\\\\.[a-z]{2,4}$')]),\r\n      }),\r\n      shippingAddress: this.formBuilder.group({\r\n        street:  new FormControl('',[Validators.required, Validators.minLength(2),\r\n                                     Luv2ShopValidators.notOnlyWhitespace]),\r\n        city: new FormControl('',[Validators.required, Validators.minLength(2),\r\n                                  Luv2ShopValidators.notOnlyWhitespace]),\r\n        state: new FormControl('',[Validators.required]),\r\n        country: new FormControl('',[Validators.required]),\r\n        zipCode: new FormControl('',[Validators.required, Validators.minLength(2),\r\n                                     Luv2ShopValidators.notOnlyWhitespace]),\r\n      }),\r\n      billingAddress: this.formBuilder.group({\r\n        street:  new FormControl('',[Validators.required, Validators.minLength(2),\r\n                                     Luv2ShopValidators.notOnlyWhitespace]),\r\n        city: new FormControl('',[Validators.required, Validators.minLength(2),\r\n                                  Luv2ShopValidators.notOnlyWhitespace]),\r\n        state: new FormControl('',[Validators.required]),\r\n        country: new FormControl('',[Validators.required]),\r\n        zipCode: new FormControl('',[Validators.required, Validators.minLength(2),\r\n                                     Luv2ShopValidators.notOnlyWhitespace]),\r\n      }),\r\n      creditCard: this.formBuilder.group({\r\n        // cardType: new FormControl('',[Validators.required]),\r\n        // nameOnCard: new FormControl('',[Validators.required, Validators.minLength(2),\r\n        //                                 Luv2ShopValidators.notOnlyWhitespace]),\r\n        // cardNumber: new FormControl('',[Validators.required, Validators.pattern('[0-9]{16}')]),\r\n        // securityCode: new FormControl('',[Validators.required, Validators.pattern('[0-9]{3}')]),\r\n        // expirationMonth: [''],\r\n        // expirationYear: ['']\r\n      })\r\n    });\r\n\r\n    /*\r\n    //populate credit card months\r\n    const startMonth: number = new Date().getMonth() + 1;\r\n    console.log(\"startMonth: \" + startMonth);\r\n\r\n    this.luv2ShopFormService.getCreditCardMonths(startMonth).subscribe(\r\n      data => {\r\n        console.log(\"Retrieved credit card months: \" +JSON.stringify(data));\r\n        this.creditCardMonths = data;\r\n      }\r\n    );\r\n\r\n    //populate credit card years\r\n\r\n    this.luv2ShopFormService.getCreditCardYears().subscribe(\r\n      data => {\r\n        console.log(\"Retrieved credit card years: \" +JSON.stringify(data));\r\n        this.creditCardYears = data;\r\n      }\r\n    );\r\n    */\r\n\r\n    // populate countries\r\n    this.luv2ShopFormService.getCountries().subscribe(\r\n      data => {\r\n        console.log(\"Retrieved countries: \" + JSON.stringify(data));\r\n        this.countries = data;\r\n      }\r\n    )\r\n  }\r\n  setupStripePaymentForm() {\r\n    //get a handle to stripe elements\r\n    var elements = this.stripe.elements();\r\n\r\n    //Create a card element\r\n    this.cardElement =  elements.create('card', { hidePostalCode: true});\r\n\r\n    //Add an instance of card UI component into the 'card-element' div\r\n    this.cardElement.mount('#card-element');\r\n\r\n    //Add event binding for the 'change' event on the card element\r\n    this.cardElement.on('change', (event: any) => {\r\n\r\n      //get a handle to card-errors element\r\n      this.displayError = document.getElementById('card-errors');\r\n\r\n      if(event.complete) {\r\n        this.displayError.textContent = \"\";\r\n      } else if (event.error) {\r\n        this.displayError.textContent = event.error.message;\r\n      }\r\n    })\r\n  }\r\n\r\n  reviewCartDetails() {\r\n    //subscribe to cartService.totalQuantity\r\n    this.cartService.totalQuantity.subscribe(\r\n      totalQuantity => this.totalQuantity = totalQuantity\r\n    );\r\n\r\n    //subscribe to cartService.totalPrice\r\n    this.cartService.totalPrice.subscribe(\r\n      totalPrice => this.totalPrice = totalPrice\r\n    );\r\n  }\r\n\r\n  get firstName(){ return this.checkoutFormGroup.get('customer.firstName');}\r\n  get lastName(){ return this.checkoutFormGroup.get('customer.lastName');}\r\n  get email(){ return this.checkoutFormGroup.get('customer.email');}\r\n\r\n  get shippingAddressStreet(){ return this.checkoutFormGroup.get('shippingAddress.street');}\r\n  get shippingAddressCity(){ return this.checkoutFormGroup.get('shippingAddress.city');}\r\n  get shippingAddressState(){ return this.checkoutFormGroup.get('shippingAddress.state');}\r\n  get shippingAddressZipCode(){ return this.checkoutFormGroup.get('shippingAddress.zipCode');}\r\n  get shippingAddressCountry(){ return this.checkoutFormGroup.get('shippingAddress.country');}\r\n\r\n  get billingAddressStreet(){ return this.checkoutFormGroup.get('billingAddress.street');}\r\n  get billingAddressCity(){ return this.checkoutFormGroup.get('billingAddress.city');}\r\n  get billingAddressState(){ return this.checkoutFormGroup.get('billingAddress.state');}\r\n  get billingAddressZipCode(){ return this.checkoutFormGroup.get('billingAddress.zipCode');}\r\n  get billingAddressCountry(){ return this.checkoutFormGroup.get('billingAddress.country');}\r\n\r\n  get creditCardType(){ return this.checkoutFormGroup.get('creditCard.cardType');}\r\n  get creditCardNameOnCard(){ return this.checkoutFormGroup.get('creditCard.nameOnCard');}\r\n  get creditCardNumber(){ return this.checkoutFormGroup.get('creditCard.cardNumber');}\r\n  get creditCardSecurityCode(){ return this.checkoutFormGroup.get('creditCard.securityCode');}\r\n\r\n  copyShippingAddressToBillingAddress(event){\r\n\r\n    if(event.target.checked){\r\n      this.checkoutFormGroup.controls.billingAddress\r\n        .setValue(this.checkoutFormGroup.controls.shippingAddress.value);\r\n\r\n      //bug fix for states not copying from shipping to billing\r\n      this.billingAddressStates = this.shippingAddressStates;\r\n    }\r\n    else{\r\n      this.checkoutFormGroup.controls.billingAddress.reset();\r\n      \r\n      //bug fix for states\r\n      this.billingAddressStates = [];\r\n    }\r\n\r\n  }\r\n\r\n  onSubmit(){\r\n    console.log(\"Handling the submit button\");\r\n\r\n    if(this,this.checkoutFormGroup.invalid){\r\n      this.checkoutFormGroup.markAllAsTouched();\r\n      return;\r\n    }\r\n\r\n    console.log(this.checkoutFormGroup.get('customer').value);\r\n    console.log(\"The email address is \" + this.checkoutFormGroup.get('customer').value.email);\r\n    console.log(\"The shipping address country is \" + this.checkoutFormGroup.get('shippingAddress').value.country.name);\r\n    console.log(\"The shipping address state is \" + this.checkoutFormGroup.get('shippingAddress').value.state.name);\r\n\r\n\r\n    //set up order \r\n    let order = new Order();\r\n    order.totalPrice = this.totalPrice;\r\n    order.totalQuantity = this.totalQuantity;\r\n\r\n    //get cart items\r\n    const cartItems = this.cartService.cartItems;\r\n    \r\n    //create orderItems and cartItems \r\n    //long way\r\n    // let orderItems: OrderItem[] = [];\r\n    // for ( let i = 0; i<cartItems.length; i++){\r\n    //   orderItems[i] = new OrderItem(cartItems[i]);\r\n    // }\r\n\r\n    //short way of doing the same thing\r\n    let orderItems: OrderItem[] = cartItems.map(tempCartItem => new OrderItem(tempCartItem));\r\n\r\n    //set up purchase\r\n    let purchase = new Purchase();\r\n    \r\n    //populate purchase - customer\r\n    purchase.customer = this.checkoutFormGroup.controls['customer'].value;\r\n\r\n    //populate purchase - shipping address\r\n    purchase.shippingAddress = this.checkoutFormGroup.controls['shippingAddress'].value;\r\n    const shippingState: State = JSON.parse(JSON.stringify(purchase.shippingAddress.state));\r\n    const shippingCountry: Country = JSON.parse(JSON.stringify(purchase.shippingAddress.country));\r\n    purchase.shippingAddress.state = shippingState.name;\r\n    purchase.shippingAddress.country = shippingCountry.name;\r\n\r\n    //populate purchase - billing address\r\n    purchase.billingAddress = this.checkoutFormGroup.controls['billingAddress'].value;\r\n    const billingState: State = JSON.parse(JSON.stringify(purchase.billingAddress.state));\r\n    const billingCountry: Country = JSON.parse(JSON.stringify(purchase.billingAddress.country));\r\n    purchase.billingAddress.state = billingState.name;\r\n    purchase.billingAddress.country = billingCountry.name;\r\n\r\n    //populate purchase - order and orderItems\r\n    purchase.order = order;\r\n    purchase.orderItems = orderItems;\r\n\r\n    //compute payment info\r\n    this.paymentInfo.amount = Math.round(this.totalPrice * 100);\r\n    this.paymentInfo.currency = \"USD\";\r\n    this.paymentInfo.receiptEmail = purchase.customer.email;\r\n\r\n    //if valid form then \r\n    //create payment intent\r\n    //confirm card payment\r\n    //place order\r\n\r\n    if(!this.checkoutFormGroup.invalid && this.displayError.textContent === \"\"){\r\n      this.isDisabled = true;\r\n      this.checkoutService.createPaymentIntent(this.paymentInfo).subscribe(\r\n        (paymentIntentResponse) => {\r\n          this.stripe.confirmCardPayment(paymentIntentResponse.client_secret,\r\n            {\r\n              payment_method: {\r\n                card: this.cardElement,\r\n                billing_details: {\r\n                  email: purchase.customer.email,\r\n                  name: `${purchase.customer.firstName} ${purchase.customer.lastName}`,\r\n                  address: {\r\n                    line1: purchase.billingAddress.street,\r\n                    city: purchase.billingAddress.city,\r\n                    state: purchase.billingAddress.state,\r\n                    postal_code: purchase.billingAddress.zipCode,\r\n                    country: this.billingAddressCountry.value.code\r\n                  }\r\n                }\r\n              }\r\n            }, {handleActions: false})\r\n            .then((result:any) => {\r\n              if (result.error) {\r\n                alert(`There was an error: ${result.error.message}`);\r\n                this.isDisabled = false;\r\n              } else {\r\n                //call REST API via the CheckoutService\r\n                this.checkoutService.placeOrder(purchase).subscribe({\r\n                  next: (response: any) => {\r\n                    alert(`Your order has been received. \\nOrder tracking number: ${response.orderTrackingNumber}`);\r\n\r\n                    this.resetCart();\r\n                    this.isDisabled = false;\r\n                    \r\n                    //compute payment info\r\n                    this.emailInfo.firstName = purchase.customer.firstName;\r\n                    this.emailInfo.lastName = purchase.customer.lastName;\r\n                    this.emailInfo.amount = this.paymentInfo.amount/100;\r\n                    this.emailInfo.trackingNo = response.orderTrackingNumber;\r\n                    this.emailInfo.recipient = purchase.customer.email;\r\n\r\n                    console.log(this.emailInfo);\r\n                    //call sendMail REST API\r\n                    this.emailService.sendMail(this.emailInfo).then(\r\n                      (emailResponse: any) => {\r\n                        console.log(`${emailResponse}`);\r\n                      },\r\n                      (emailError: any) => {\r\n                        console.log(`There was an error sending the email: ${emailError.message}`);\r\n                      }\r\n                    );\r\n                  },\r\n                  error: (err: any) => {\r\n                    alert(`There was an error: ${err.message}`);\r\n                    this.isDisabled = false;\r\n                  }\r\n                })\r\n              }\r\n            });\r\n        }\r\n      );\r\n    } else {\r\n      this.checkoutFormGroup.markAllAsTouched();\r\n      return;\r\n    }\r\n\r\n\r\n    //call REST API via the CheckoutService (old w/o stripe)\r\n    // this.checkoutService.placeOrder(purchase).subscribe({\r\n    //     next: response => {\r\n    //       alert(`Your order has been received.\\nOrder tracking number: ${response.orderTrackingNumber}`);\r\n\r\n    //       //reset cart\r\n    //       this.resetCart();\r\n\r\n    //     },\r\n    //     error: err => {\r\n    //       alert(`There was an error: ${err.message}`);\r\n    //     }\r\n    //   }\r\n    // );\r\n  }\r\n\r\n  resetCart() {\r\n    //reset cart data\r\n    this.cartService.cartItems = [];\r\n    this.cartService.totalPrice.next(0);\r\n    this.cartService.totalQuantity.next(0);\r\n    this.cartService.persistCartItems();\r\n\r\n    //reset form data\r\n    this.checkoutFormGroup.reset();\r\n\r\n    //navigate back to the products page\r\n    this.router.navigateByUrl(\"/products\");\r\n  }\r\n\r\n  handleMonthsAndYears(){\r\n\r\n    const creditCardFormGroup = this.checkoutFormGroup.get('creditCard');\r\n\r\n    const currentYear: number = new Date().getFullYear();\r\n    const selectedYear: number = Number(creditCardFormGroup.value.expirationYear);\r\n\r\n    //if the current year equals the selected year, then start with the current month\r\n\r\n    let startMonth: number;\r\n\r\n    if (currentYear === selectedYear){\r\n      startMonth = new Date().getMonth() + 1;\r\n    }\r\n    else {\r\n      startMonth = 1;\r\n    }\r\n\r\n    this.luv2ShopFormService.getCreditCardMonths(startMonth).subscribe(\r\n      data => {\r\n        console.log(\"Retrieved credit card months: \" + JSON.stringify(data));\r\n        this.creditCardMonths = data;\r\n      }\r\n    );\r\n  }\r\n\r\n  getStates(formGroupName: string){\r\n\r\n    const formGroup = this.checkoutFormGroup.get(formGroupName);\r\n\r\n    const countryCode = formGroup.value.country.code;\r\n    const countryName = formGroup.value.country.name;\r\n\r\n    console.log(`${formGroupName} country code: ${countryCode}`);\r\n    console.log(`${formGroupName} country name: ${countryName}`);\r\n\r\n    this.luv2ShopFormService.getStates(countryCode).subscribe(\r\n      data => {\r\n\r\n        if(formGroupName === 'shippingAddress'){\r\n          this.shippingAddressStates = data;\r\n        }\r\n        else{\r\n          this.billingAddressStates = data;\r\n        }\r\n\r\n        //select the first state as the default\r\n        formGroup.get('state').setValue(data[0]);\r\n      }\r\n    );\r\n  }\r\n}\r\n","<div class=\"main-content page-m\">\r\n    <div class=\"section-content section-content-p30\">\r\n        <div class=\"cotainer-fluid\">\r\n            <form [formGroup]='checkoutFormGroup' (ngSubmit)=\"onSubmit()\">\r\n\r\n                <!--customer form group-->\r\n                <div formGroupName=\"customer\" class=\"form-area\">\r\n                    <h3>Customer</h3>\r\n                    <div class=\"row\">\r\n                        <div class=\"col-md-2\"><label>First Name</label></div>\r\n                        <div class=\"col-md-9\">\r\n                            <div class=\"input-space\">\r\n                                <input formControlName=\"firstName\" type=\"text\">\r\n\r\n                                <div *ngIf=\"firstName.invalid && (firstName.dirty || firstName.touched)\"\r\n                                    class=\"alert alert-danger mt-1\">\r\n\r\n                                    <div *ngIf=\"firstName.errors.required || firstName.errors.notOnlyWhitespace\">\r\n                                        First name is required.\r\n                                    </div>\r\n\r\n                                    <div *ngIf=\"firstName.errors.minlength\">\r\n                                        First name is must be at least 2 characters long.\r\n                                    </div>\r\n\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div class=\"row\">\r\n                        <div class=\"col-md-2\"><label>Last Name</label></div>\r\n                        <div class=\"col-md-9\">\r\n                            <div class=\"input-space\">\r\n                                <input formControlName=\"lastName\" type=\"text\">\r\n\r\n                                <div *ngIf=\"lastName.invalid && (lastName.dirty || lastName.touched)\"\r\n                                    class=\"alert alert-danger mt-1\">\r\n\r\n                                    <div *ngIf=\"lastName.errors.required || lastName.errors.notOnlyWhitespace\">\r\n                                        Last name is required.\r\n                                    </div>\r\n\r\n                                    <div *ngIf=\"lastName.errors.minlength\">\r\n                                        Last name is must be at least 2 characters long.\r\n                                    </div>\r\n\r\n                                </div>\r\n\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div class=\"row\">\r\n                        <div class=\"col-md-2\"><label>Email</label></div>\r\n                        <div class=\"col-md-9\">\r\n                            <div class=\"input-space\">\r\n                                <input formControlName=\"email\" type=\"text\">\r\n\r\n                                <div *ngIf=\"email.invalid && (email.dirty || email.touched)\"\r\n                                    class=\"alert alert-danger mt-1\">\r\n\r\n                                    <div *ngIf=\"email.errors.required\">\r\n                                        Email is required.\r\n                                    </div>\r\n\r\n                                    <div *ngIf=\"email.errors.pattern\">\r\n                                        Email must be a valid email address format.\r\n                                    </div>\r\n\r\n                                </div>\r\n\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <!--Shipping Address-->\r\n                <div formGroupName=\"shippingAddress\" class=\"form-area\">\r\n                    <h3>Shipping Address</h3>\r\n\r\n                    <div class=\"row\">\r\n                        <div class=\"col-md-2\"><label>Country</label></div>\r\n                        <div class=\"col-md-9\">\r\n                            <div class=\"input-space\">\r\n                                <select formControlName=\"country\" (change)=\"getStates('shippingAddress')\">\r\n                                    <option *ngFor=\"let country of countries\" [ngValue]=\"country\">\r\n                                        {{ country.name }}\r\n                                    </option>\r\n                                </select>\r\n\r\n                                <div *ngIf=\"shippingAddressCountry.invalid && (shippingAddressCountry.dirty || shippingAddressCountry.touched)\"\r\n                                    class=\"alert alert-danger mt-1\">\r\n                                    <div *ngIf=\"shippingAddressCountry.errors.required\">\r\n                                        Country is required.\r\n                                    </div>\r\n                                </div>\r\n\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div class=\"row\">\r\n                        <div class=\"col-md-2\"><label>Street</label></div>\r\n                        <div class=\"col-md-9\">\r\n                            <div class=\"input-space\">\r\n                                <input formControlName=\"street\" type=\"text\">\r\n\r\n                                <div *ngIf=\"shippingAddressStreet.invalid && (shippingAddressStreet.dirty || shippingAddressStreet.touched)\"\r\n                                    class=\"alert alert-danger mt-1\">\r\n                                    <div\r\n                                        *ngIf=\"shippingAddressStreet.errors.required || shippingAddressStreet.errors.notOnlyWhitespace\">\r\n                                        Street is required.\r\n                                    </div>\r\n\r\n                                    <div *ngIf=\"shippingAddressStreet.errors.minlength\">\r\n                                        Street must be at least 2 characters long.\r\n                                    </div>\r\n\r\n                                </div>\r\n\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div class=\"row\">\r\n                        <div class=\"col-md-2\"><label>City</label></div>\r\n                        <div class=\"col-md-9\">\r\n                            <div class=\"input-space\">\r\n                                <input formControlName=\"city\" type=\"text\">\r\n\r\n                                <div *ngIf=\"shippingAddressCity.invalid && (shippingAddressCity.dirty || shippingAddressCity.touched)\"\r\n                                    class=\"alert alert-danger mt-1\">\r\n                                    <div\r\n                                        *ngIf=\"shippingAddressCity.errors.required || shippingAddressCity.errors.notOnlyWhitespace\">\r\n                                        City is required.\r\n                                    </div>\r\n\r\n                                    <div *ngIf=\"shippingAddressCity.errors.minlength\">\r\n                                        City must be at least 2 characters long.\r\n                                    </div>\r\n\r\n                                </div>\r\n\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div class=\"row\">\r\n                        <div class=\"col-md-2\"><label>State</label></div>\r\n                        <div class=\"col-md-9\">\r\n                            <div class=\"input-space\">\r\n                                <select formControlName=\"state\">\r\n                                    <option *ngFor=\"let state of shippingAddressStates\" [ngValue]=\"state\">\r\n                                        {{ state.name }}\r\n                                    </option>\r\n                                </select>\r\n\r\n                                <div *ngIf=\"shippingAddressState.invalid && (shippingAddressState.dirty || shippingAddressState.touched)\"\r\n                                    class=\"alert alert-danger mt-1\">\r\n                                    <div *ngIf=\"shippingAddressState.errors.required\">\r\n                                        State is required.\r\n                                    </div>\r\n                                </div>\r\n\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div class=\"row\">\r\n                        <div class=\"col-md-2\"><label>Zip Code</label></div>\r\n                        <div class=\"col-md-9\">\r\n                            <div class=\"input-space\">\r\n                                <input formControlName=\"zipCode\" type=\"text\">\r\n\r\n                                <div *ngIf=\"shippingAddressZipCode.invalid && (shippingAddressZipCode.dirty || shippingAddressZipCode.touched)\"\r\n                                    class=\"alert alert-danger mt-1\">\r\n                                    <div\r\n                                        *ngIf=\"shippingAddressZipCode.errors.required || shippingAddressZipCode.errors.notOnlyWhitespace\">\r\n                                        ZipCode is required.\r\n                                    </div>\r\n\r\n                                    <div *ngIf=\"shippingAddressZipCode.errors.minlength\">\r\n                                        Zip Code must be at least 2 characters long.\r\n                                    </div>\r\n\r\n                                </div>\r\n\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n\r\n                <!--Add check box to copy shipping to billing-->\r\n                <div class=\"input-space\">\r\n                    <label class=\"au-checkbox\">\r\n                        <input type=\"checkbox\" (change)=\"copyShippingAddressToBillingAddress($event)\">\r\n                        <span class=\"au-checkmark\"></span> Billing Address same as Shipping Address\r\n                    </label>\r\n                </div>\r\n\r\n                <!--Billing Address-->\r\n                <div formGroupName=\"billingAddress\" class=\"form-area\">\r\n                    <h3>Billing Address</h3>\r\n\r\n                    <div class=\"row\">\r\n                        <div class=\"col-md-2\"><label>Country</label></div>\r\n                        <div class=\"col-md-9\">\r\n                            <div class=\"input-space\">\r\n                                <select formControlName=\"country\" (change)=\"getStates('billingAddress')\">\r\n                                    <option *ngFor=\"let country of countries\" [ngValue]=\"country\">\r\n                                        {{ country.name }}\r\n                                    </option>\r\n                                </select>\r\n\r\n                                <div *ngIf=\"billingAddressCountry.invalid && (billingAddressCountry.dirty || billingAddressCountry.touched)\"\r\n                                    class=\"alert alert-danger mt-1\">\r\n                                    <div *ngIf=\"billingAddressCountry.errors.required\">\r\n                                        Country is required.\r\n                                    </div>\r\n                                </div>\r\n\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div class=\"row\">\r\n                        <div class=\"col-md-2\"><label>Street</label></div>\r\n                        <div class=\"col-md-9\">\r\n                            <div class=\"input-space\">\r\n                                <input formControlName=\"street\" type=\"text\">\r\n\r\n                                <div *ngIf=\"billingAddressStreet.invalid && (billingAddressStreet.dirty || billingAddressStreet.touched)\"\r\n                                    class=\"alert alert-danger mt-1\">\r\n                                    <div\r\n                                        *ngIf=\"billingAddressStreet.errors.required || billingAddressStreet.errors.notOnlyWhitespace\">\r\n                                        Street is required.\r\n                                    </div>\r\n\r\n                                    <div *ngIf=\"billingAddressStreet.errors.minlength\">\r\n                                        Street must be at least 2 characters long.\r\n                                    </div>\r\n\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div class=\"row\">\r\n                        <div class=\"col-md-2\"><label>City</label></div>\r\n                        <div class=\"col-md-9\">\r\n                            <div class=\"input-space\">\r\n                                <input formControlName=\"city\" type=\"text\">\r\n\r\n                                <div *ngIf=\"billingAddressCity.invalid && (billingAddressCity.dirty || billingAddressCity.touched)\"\r\n                                    class=\"alert alert-danger mt-1\">\r\n                                    <div\r\n                                        *ngIf=\"billingAddressCity.errors.required || billingAddressCity.errors.notOnlyWhitespace\">\r\n                                        City is required.\r\n                                    </div>\r\n\r\n                                    <div *ngIf=\"billingAddressCity.errors.minlength\">\r\n                                        City must be at least 2 characters long.\r\n                                    </div>\r\n\r\n                                </div>\r\n\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div class=\"row\">\r\n                        <div class=\"col-md-2\"><label>State</label></div>\r\n                        <div class=\"col-md-9\">\r\n                            <div class=\"input-space\">\r\n                                <select formControlName=\"state\">\r\n                                    <option *ngFor=\"let state of billingAddressStates\" [ngValue]=\"state\">\r\n                                        {{ state.name }}\r\n                                    </option>\r\n                                </select>\r\n\r\n                                <div *ngIf=\"billingAddressState.invalid && (billingAddressState.dirty || billingAddressState.touched)\"\r\n                                    class=\"alert alert-danger mt-1\">\r\n                                    <div *ngIf=\"billingAddressState.errors.required\">\r\n                                        State is required.\r\n                                    </div>\r\n                                </div>\r\n\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div class=\"row\">\r\n                        <div class=\"col-md-2\"><label>Zip Code</label></div>\r\n                        <div class=\"col-md-9\">\r\n                            <div class=\"input-space\">\r\n                                <input formControlName=\"zipCode\" type=\"text\">\r\n\r\n                                <div *ngIf=\"billingAddressZipCode.invalid && (billingAddressZipCode.dirty || billingAddressZipCode.touched)\"\r\n                                    class=\"alert alert-danger mt-1\">\r\n                                    <div\r\n                                        *ngIf=\"billingAddressZipCode.errors.required || billingAddressZipCode.errors.notOnlyWhitespace\">\r\n                                        ZipCode is required.\r\n                                    </div>\r\n\r\n                                    <div *ngIf=\"billingAddressZipCode.errors.minlength\">\r\n                                        Zip Code must be at least 2 characters long.\r\n                                    </div>\r\n\r\n                                </div>\r\n\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n\r\n                <!--Credit Card-->\r\n                <!-- <div formGroupName=\"creditCard\" class=\"form-area\">\r\n                    <h3>Credit Card</h3>\r\n                    <div class=\"row\">\r\n                        <div class=\"col-md-2\"><label>Card Type</label></div>\r\n                        <div class=\"col-md-9\">\r\n                            <div class=\"input-space\">\r\n                                <select formControlName=\"cardType\">\r\n                                    <option>Visa</option>\r\n                                    <option>Mastercard</option>\r\n                                </select>\r\n\r\n                                <div *ngIf=\"creditCardType.invalid && (creditCardType.dirty || creditCardType.touched)\"\r\n                                    class=\"alert alert-danger mt-1\">\r\n                                    <div *ngIf=\"creditCardType.errors.required\">\r\n                                        Credit card type is required.\r\n                                    </div>\r\n                                </div>\r\n\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div class=\"row\">\r\n                        <div class=\"col-md-2\"><label>Name on Card</label></div>\r\n                        <div class=\"col-md-9\">\r\n                            <div class=\"input-space\">\r\n                                <input formControlName=\"nameOnCard\" type=\"text\">\r\n\r\n                                <div *ngIf=\"creditCardNameOnCard.invalid && (creditCardNameOnCard.dirty || creditCardNameOnCard.touched)\"\r\n                                    class=\"alert alert-danger mt-1\">\r\n                                    <div\r\n                                        *ngIf=\"creditCardNameOnCard.errors.required || creditCardNameOnCard.errors.notOnlyWhitespace\">\r\n                                        Name is required.\r\n                                    </div>\r\n\r\n                                    <div *ngIf=\"creditCardNameOnCard.errors.minlength\">\r\n                                        Name must be at least 2 characters long.\r\n                                    </div>\r\n\r\n                                </div>\r\n\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div class=\"row\">\r\n                        <div class=\"col-md-2\"><label>Card Number</label></div>\r\n                        <div class=\"col-md-9\">\r\n                            <div class=\"input-space\">\r\n                                <input formControlName=\"cardNumber\" type=\"text\">\r\n\r\n                                <div *ngIf=\"creditCardNumber.invalid && (creditCardNumber.dirty || creditCardNumber.touched)\"\r\n                                    class=\"alert alert-danger mt-1\">\r\n                                    <div *ngIf=\"creditCardNumber.errors.required\">\r\n                                       Card number is required.\r\n                                    </div>\r\n\r\n                                    <div *ngIf=\"creditCardNumber.errors.pattern\">\r\n                                        Card number must be 16 digits long.\r\n                                     </div>\r\n\r\n                                </div>\r\n\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div class=\"row\">\r\n                        <div class=\"col-md-2\"><label>Security Code</label></div>\r\n                        <div class=\"col-md-9\">\r\n                            <div class=\"input-space\">\r\n                                <input formControlName=\"securityCode\" type=\"text\">\r\n\r\n                                <div *ngIf=\"creditCardSecurityCode.invalid && (creditCardSecurityCode.dirty || creditCardSecurityCode.touched)\"\r\n                                class=\"alert alert-danger mt-1\">\r\n                                <div *ngIf=\"creditCardSecurityCode.errors.required\">\r\n                                   Security Code is required.\r\n                                </div>\r\n\r\n                                <div *ngIf=\"creditCardSecurityCode.errors.pattern\">\r\n                                    Security Code must be 3 digits long.\r\n                                 </div>\r\n\r\n                            </div>\r\n\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div class=\"row\">\r\n                        <div class=\"col-md-2\"><label>Expiration Month</label></div>\r\n                        <div class=\"col-md-9\">\r\n                            <div class=\"input-space\">\r\n                                <select formControlName=\"expirationMonth\">\r\n                                    <option *ngFor=\"let month of creditCardMonths\">\r\n                                        {{ month }}\r\n                                    </option>\r\n                                </select>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div class=\"row\">\r\n                        <div class=\"col-md-2\"><label>Expiration Year</label></div>\r\n                        <div class=\"col-md-9\">\r\n                            <div class=\"input-space\">\r\n                                <select formControlName=\"expirationYear\" (change)=\"handleMonthsAndYears()\">\r\n                                    <option *ngFor=\"let year of creditCardYears\">\r\n                                        {{ year }}\r\n                                    </option>\r\n                                </select>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                </div> -->\r\n\r\n                <!--Stripe elements credit card section-->\r\n                <div formGroupName=\"creditCard\" class=\"form-area\">\r\n                    <h3>Credit/Debit Card</h3>\r\n                    <div id=\"card-element\"></div>\r\n\r\n                    <div id=\"card-errors\" class=\"displayError.textContent!=='': 'alert alert-danger mt-1'\"></div>\r\n                </div>\r\n\r\n                <!--Order Details-->\r\n                <div class=\"form-area\">\r\n                    <h3>Review Your Order</h3>\r\n                    <p>Total Quantity: {{ totalQuantity }}</p>\r\n                    <p>Shipping: FREE</p>\r\n                    <p>Total Price: {{ totalPrice | currency: 'USD' }}</p>\r\n                </div>\r\n\r\n                <!--submit button-->\r\n                <div class=\"text-center\">\r\n                    <button type=\"submit\" class=\"btn btn-info\" [disabled]=\"isDisabled\">Purchase</button>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    </div>\r\n</div>","import { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-search',\r\n  templateUrl: './search.component.html',\r\n  styleUrls: ['./search.component.css']\r\n})\r\nexport class SearchComponent implements OnInit {\r\n\r\n  constructor(private router: Router) { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  doSearch(value: string){\r\n    console.log(`value=${value}`);\r\n    this.router.navigateByUrl(`/search/${value}`);\r\n  }\r\n}\r\n","<div class=\"form-header\">\r\n\r\n    <input  #myInput type = \"text\"\r\n            placeholder = \"Search for products ...\" \r\n            class = \"au-input au-input-xl\" \r\n            (keyup.enter) = \"doSearch(myInput.value)\"/>\r\n\r\n    <button (click) = \"doSearch(myInput.value)\" class=\"au-btn-submit\">\r\n        Search\r\n    </button>\r\n</div>","import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { Purchase } from '../common/purchase';\r\nimport { environment } from 'src/environments/environment';\r\nimport { PaymentInfo } from '../common/payment-info';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CheckoutService {\r\n\r\n\r\n  private purchaseUrl = environment.backendApi + '/checkout/purchase';\r\n  private paymentIntentUrl = environment.backendApi + '/checkout/payment-intent';\r\n  // private purchaseUrl = 'https://ecommerce-backend-deploy.herokuapp.com/api/checkout/purchase';\r\n  constructor(private httpClient: HttpClient) { }\r\n\r\n  placeOrder(purchase: Purchase): Observable<any>{\r\n    return this.httpClient.post<Purchase>(this.purchaseUrl,purchase);\r\n  }\r\n\r\n  createPaymentIntent(paymentInfo: PaymentInfo): Observable<any>{\r\n    return this.httpClient.post<PaymentInfo>(this.paymentIntentUrl, paymentInfo); \r\n  }\r\n}\r\n","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent {\r\n  title = 'angular-ecommerce';\r\n}\r\n","<div class=\"page-wrapper\">\r\n\r\n  <!-- MENU SIDEBAR-->\r\n  <aside class=\"menu-sidebar d-none d-lg-block\">\r\n    <div class=\"logo\">\r\n      <a routerLink=\"/products\">\r\n        <img src=\"assets/images/logo.png\" alt=\"luv2shop\" class=\"img-responsive\">\r\n      </a>\r\n    </div>\r\n    <app-product-category-menu></app-product-category-menu>\r\n\r\n   \r\n  </aside>\r\n  <!-- END MENU SIDEBAR-->\r\n\r\n  <!-- PAGE CONTAINER-->\r\n  <div class=\"page-container\">\r\n    <!-- HEADER DESKTOP-->\r\n    <header class=\"header-desktop\">\r\n      <div class=\"section-content section-content-p30\">\r\n        <div class=\"container-fluid\">\r\n          <div class=\"header-wrap\">\r\n\r\n            <app-search></app-search>\r\n\r\n            <app-login-status></app-login-status>\r\n\r\n            <app-cart-status></app-cart-status>\r\n\r\n            \r\n          </div>\r\n          <div class=\"account-wrap\"></div>\r\n        </div>\r\n      </div>\r\n    </header>\r\n    <!-- END HEADER DESKTOP-->\r\n\r\n    <!-- MAIN CONTENT-->\r\n    <router-outlet></router-outlet>\r\n   \r\n\r\n  </div>\r\n</div>\r\n\r\n<!-- END PAGE CONTAINER-->\r\n\r\n\r\n<footer>\r\n  <ul>\r\n    <li><a href=\"#\">About Us</a></li>\r\n    <li><a href=\"#\">Contact Us</a></li>\r\n    <li><a href=\"#\">Help</a></li>\r\n  </ul>\r\n</footer>","export class Product {\r\n    id: string;\r\n    sku: string;\r\n    name: string;\r\n    description: string;\r\n    unitPrice: number;\r\n    imageUrl: string;\r\n    active: boolean;\r\n    unitsInStock: number;\r\n    dateCreated: Date;\r\n    lastUpdated: Date;\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { OktaAuthService } from '@okta/okta-angular';\r\nimport * as OktaSignIn from '@okta/okta-signin-widget';\r\n\r\nimport myAppConfig from 'src/app/config/my-app-config';\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.css']\r\n})\r\nexport class LoginComponent implements OnInit {\r\n\r\n  oktaSignin: any;\r\n\r\n  constructor(private oktaAuthService: OktaAuthService) { \r\n\r\n    this.oktaSignin = new OktaSignIn({\r\n      logo: 'assets/images/logo.png',\r\n      features: {\r\n        registration: true\r\n      },\r\n      baseUrl: myAppConfig.oidc.issuer.split('/oauth2')[0],\r\n      clientId: myAppConfig.oidc.clientId,\r\n      redirectUri: myAppConfig.oidc.redirectUri,\r\n      authParams:{\r\n        pkce: true,\r\n        issuer: myAppConfig.oidc.issuer,\r\n        scopes: myAppConfig.oidc.scopes\r\n      }\r\n    });\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.oktaSignin.remove();\r\n\r\n    this.oktaSignin.renderEl({\r\n      el: '#okta-sign-in-widget'}, //this name should be the same as div tag id in login.component.html\r\n      (response) => {\r\n        if (response.status === 'SUCCESS'){\r\n          this.oktaAuthService.signInWithRedirect();\r\n        }\r\n      },\r\n      (error) => {\r\n        throw error;\r\n      }\r\n    ); \r\n  }\r\n\r\n}\r\n","<!--Container to inject the Okta Sign-in Widget-->\r\n\r\n<div class=\"pt-5\">\r\n    <div id=\"okta-sign-in-widget\" class=\"pt-5\"></div>\r\n</div>","import { CartItem } from \"./cart-item\";\r\n\r\nexport class OrderItem {\r\n\r\n    imageUrl: string;\r\n    unitPrice: number;\r\n    quantity: number;\r\n    productId: string;\r\n\r\n    constructor(cartItem: CartItem){\r\n        this.imageUrl = cartItem.imageUrl;\r\n        this.unitPrice = cartItem.unitPrice;\r\n        this.quantity = cartItem.quantity;\r\n        this.productId = cartItem.id;\r\n    }\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { CartService } from 'src/app/services/cart.service';\r\n\r\n@Component({\r\n  selector: 'app-cart-status',\r\n  templateUrl: './cart-status.component.html',\r\n  styleUrls: ['./cart-status.component.css']\r\n})\r\nexport class CartStatusComponent implements OnInit {\r\n\r\n  totalPrice: number = 0.00;\r\n  totalQuantity: number = 0;\r\n\r\n  constructor(private cartService: CartService) { }\r\n\r\n  ngOnInit(): void {\r\n    this.updateCartStatus();\r\n  }\r\n\r\n\r\n  updateCartStatus() {\r\n    \r\n    // subscribe to the cart totalPrice\r\n    this.cartService.totalPrice.subscribe(\r\n      data => this.totalPrice = data\r\n    );\r\n\r\n    //subscribe to the cart totalQuantity\r\n    this.cartService.totalQuantity.subscribe(\r\n      data => this.totalQuantity = data\r\n    );\r\n  }\r\n\r\n}\r\n","<div class=\"cart-area d-n\">\r\n    <a routerLink='/cart-details'>\r\n        <div class=\"total\"> {{ totalPrice | currency : 'USD' }}\r\n            <span> {{ totalQuantity }} </span> \r\n        </div> \r\n        <i class=\"fa fa-shopping-cart\" aria-hidden=\"true\"></i>\r\n    </a>\r\n</div>","import { NgModule } from '@angular/core';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\n\r\nimport { AppComponent } from './app.component';\r\nimport { ProductListComponent } from './components/product-list/product-list.component';\r\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\r\nimport { ProductService } from './services/product.service';\r\n\r\nimport {Routes, RouterModule, Router} from '@angular/router';\r\nimport {ProductCategoryMenuComponent} from './components/product-category-menu/product-category-menu.component';\r\nimport {SearchComponent} from './components/search/search.component';\r\nimport {ProductDetailsComponent } from './components/product-details/product-details.component';\r\n\r\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\r\nimport { CartStatusComponent } from './components/cart-status/cart-status.component';\r\nimport { CartDetailsComponent } from './components/cart-details/cart-details.component';\r\nimport { CheckoutComponent } from './components/checkout/checkout.component';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { LoginComponent } from './components/login/login.component';\r\nimport { LoginStatusComponent } from './components/login-status/login-status.component';\r\n\r\nimport {\r\n  OKTA_CONFIG,\r\n  OktaAuthModule,\r\n  OktaCallbackComponent,\r\n  OktaAuthGuard\r\n} from '@okta/okta-angular';\r\n\r\nimport myAppConfig from './config/my-app-config';\r\nimport { MembersPageComponent } from './components/members-page/members-page.component';\r\nimport { OrderHistoryComponent } from './components/order-history/order-history.component';\r\nimport { AuthInterceptorService } from './services/auth-interceptor.service';\r\n\r\nconst oktaConfig = Object.assign({\r\n  onAuthRequired: (oktaAuth, injector) => {\r\n    const router = injector.get(Router);\r\n\r\n    //Redirect the user to your custom login page\r\n    router.navigate(['/login']);\r\n  }\r\n}, myAppConfig.oidc);\r\n\r\nconst routes : Routes = [\r\n  {path: 'order-history', component: OrderHistoryComponent, canActivate: [OktaAuthGuard] },\r\n  {path: 'members', component: MembersPageComponent, canActivate: [OktaAuthGuard]},\r\n\r\n  {path: 'login/callback', component: OktaCallbackComponent},\r\n  {path: 'login', component: LoginComponent},\r\n  \r\n  {path: 'checkout', component: CheckoutComponent},\r\n  {path: 'cart-details', component: CartDetailsComponent},\r\n  {path: 'products/:id', component: ProductDetailsComponent},\r\n  {path: 'search/:keyword', component: ProductListComponent},\r\n  {path: 'category/:id/:name', component: ProductListComponent},\r\n  {path: 'category', component: ProductListComponent},\r\n  {path: 'products', component: ProductListComponent},\r\n  {path: '', redirectTo: '/products' , pathMatch: 'full'},\r\n  {path: '**', redirectTo: '/products' , pathMatch: 'full'},\r\n];\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    ProductListComponent,\r\n    ProductCategoryMenuComponent,\r\n    SearchComponent,\r\n    ProductDetailsComponent,\r\n    CartStatusComponent,\r\n    CartDetailsComponent,\r\n    CheckoutComponent,\r\n    LoginComponent,\r\n    LoginStatusComponent,\r\n    MembersPageComponent,\r\n    OrderHistoryComponent\r\n  ],\r\n  imports: [\r\n    RouterModule.forRoot(routes),\r\n    BrowserModule,\r\n    HttpClientModule,\r\n    NgbModule,\r\n    ReactiveFormsModule,\r\n    OktaAuthModule\r\n  ],\r\n  providers: [ProductService, {provide: OKTA_CONFIG, useValue: oktaConfig },\r\n              {provide: HTTP_INTERCEPTORS, useClass: AuthInterceptorService, multi: true}],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","<div class=\"menu-sidebar-content js-scrollbar1\">\r\n    <nav class=\"navbar-sidebar\">\r\n        <ul class=\"list-unstyled navbar-list\">\r\n\r\n            <li *ngFor=\"let tempProductCategory of productCategories\">\r\n                <a routerLink=\"/category/{{ tempProductCategory.id }}/{{ tempProductCategory.categoryName }}\" routerLinkActive=\"active-link\">\r\n                    {{ tempProductCategory.categoryName }}\r\n                </a>\r\n            </li>\r\n            \r\n        </ul>\r\n    </nav>\r\n</div>","import { Component, OnInit } from '@angular/core';\r\nimport { ProductCategory } from 'src/app/common/product-category';\r\nimport { ProductService } from 'src/app/services/product.service';\r\n\r\n@Component({\r\n  selector: 'app-product-category-menu',\r\n  templateUrl: './product-category-menu.component.html',\r\n  styleUrls: ['./product-category-menu.component.css']\r\n})\r\nexport class ProductCategoryMenuComponent implements OnInit {\r\n\r\n  productCategories: ProductCategory[];\r\n\r\n  constructor(private productService:ProductService) { }\r\n\r\n  ngOnInit(): void{\r\n    this.listProductCategories();\r\n  }\r\n\r\n  listProductCategories(){\r\n\r\n    this.productService.getProductCategories().subscribe(\r\n      data => {\r\n        console.log('Product Categories=' + JSON.stringify(data)); \r\n        this.productCategories = data;\r\n      }\r\n    );\r\n  }\r\n\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { CartItem } from 'src/app/common/cart-item';\r\nimport { Product } from 'src/app/common/product';\r\nimport { CartService } from 'src/app/services/cart.service';\r\nimport { ProductService } from 'src/app/services/product.service';\r\n\r\n@Component({\r\n  selector: 'app-product-details',\r\n  templateUrl: './product-details.component.html',\r\n  styleUrls: ['./product-details.component.css']\r\n})\r\nexport class ProductDetailsComponent implements OnInit {\r\n\r\n  product: Product =  new Product();\r\n\r\n  constructor(private productService: ProductService,\r\n              private cartService: CartService,\r\n              private route: ActivatedRoute) { }\r\n\r\n  ngOnInit(): void {\r\n    this.route.paramMap.subscribe(()=>{\r\n      this.handleProductDetails();\r\n    })\r\n  }\r\n\r\n  handleProductDetails() {\r\n    //get the 'id' param string. convert string to a number using \"+\" symbol\r\n    const theProductId: number = +this.route.snapshot.paramMap.get('id');\r\n\r\n    this.productService.getProduct(theProductId).subscribe(\r\n      data => {\r\n        this.product = data;\r\n      }\r\n    )\r\n  }\r\n\r\n  addToCart(){\r\n\r\n    console.log(`Adding to cart: ${this.product.name}, ${this.product.unitPrice}`);\r\n    const theCartItem = new CartItem(this.product);\r\n    this.cartService.addToCart(theCartItem);\r\n    \r\n  }\r\n}\r\n","<div class ='detail-section'>\r\n    <div class = 'container-fluid'>\r\n\r\n        <img src=\"{{ product.imageUrl }}\" class=\"detail-img\">\r\n\r\n        <h3>{{ product.name }}</h3>\r\n        <div class=\"price\">{{ product.unitPrice | currency:\"USD\" }}</div>\r\n        <button (click)='addToCart()' class=\"btn btn-primary btn-sm\">Add to cart</button>\r\n\r\n        <hr>\r\n        <h4>Description</h4>\r\n        <p>{{ product.description }}</p>\r\n\r\n        <a routerLink = \"/products\" class=\"mt-5\">Back to Product List</a>\r\n    </div>\r\n</div>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { CartItem } from 'src/app/common/cart-item';\r\nimport { Product } from 'src/app/common/product';\r\nimport { CartService } from 'src/app/services/cart.service';\r\nimport { ProductService } from 'src/app/services/product.service';\r\n\r\n@Component({\r\n  selector: 'app-product-list',\r\n  templateUrl: './product-list-grid.component.html',\r\n  styleUrls: ['./product-list.component.css'],\r\n})\r\nexport class ProductListComponent implements OnInit {\r\n  products: Product[] = [];\r\n  currentCategoryId: number = 1;\r\n  previousCategoryId: number = 1;\r\n  searchMode: boolean = false;\r\n  currentCategoryName: string = '';\r\n\r\n  //new properties for pagination\r\n  thePageNumber: number = 1;\r\n  thePageSize: number = 5;\r\n  theTotalElements: number = 0;\r\n\r\n  previousKeyword: string = null;\r\n\r\n  constructor(\r\n    private productService: ProductService,\r\n    private cartService: CartService,\r\n    private route: ActivatedRoute\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.route.paramMap.subscribe(() => {\r\n      this.listProducts();\r\n    });\r\n  }\r\n\r\n  listProducts() {\r\n    this.searchMode = this.route.snapshot.paramMap.has('keyword');\r\n\r\n    if (this.searchMode) {\r\n      this.handleSearchProducts();\r\n    } else {\r\n      this.handleListProducts();\r\n    }\r\n  }\r\n\r\n  handleSearchProducts() {\r\n    const theKeyword: string = this.route.snapshot.paramMap.get('keyword');\r\n\r\n    //if we have a different keyword than previous\r\n    //then set thePageNumber to 1\r\n\r\n    if (this.previousKeyword != theKeyword) {\r\n      this.thePageNumber = 1;\r\n    }\r\n\r\n    this.previousKeyword = theKeyword;\r\n\r\n    console.log(`keyword=${theKeyword}, thePageNumber=${this.thePageNumber}`);\r\n\r\n    //now search for the products using keyword\r\n    this.productService\r\n      .searchProductsPaginate(\r\n        this.thePageNumber - 1,\r\n        this.thePageSize,\r\n        theKeyword\r\n      )\r\n      .subscribe(this.processResult());\r\n  }\r\n\r\n  handleListProducts() {\r\n    //check if \"id\" parameter is available\r\n    const hasCategoryId: boolean = this.route.snapshot.paramMap.has('id');\r\n\r\n    if (hasCategoryId) {\r\n      //get the \"id\" param string and convert to number using \"+\" symbol\r\n      this.currentCategoryId = +this.route.snapshot.paramMap.get('id');\r\n\r\n      // get the \"name\" param string\r\n      this.currentCategoryName = this.route.snapshot.paramMap.get('name')!;\r\n    } else {\r\n      //no category id available.... default to value 1\r\n      this.currentCategoryId = 1;\r\n      this.currentCategoryName = 'Books';\r\n    }\r\n\r\n    //\r\n    //Check if we have different category than previous\r\n    //Note: Angular will reuse a component if it is currently being viewed\r\n\r\n    //if we have a different category id than previous\r\n    //then set thePageNumber back to 1\r\n    if (this.previousCategoryId != this.currentCategoryId) {\r\n      this.thePageNumber = 1;\r\n    }\r\n\r\n    this.previousCategoryId = this.currentCategoryId;\r\n\r\n    console.log(\r\n      `currentCategoryId=${this.currentCategoryId}, thePageNumber = ${this.thePageNumber}`\r\n    );\r\n\r\n    //now get the products for the given category id\r\n    this.productService\r\n      .getProductListPaginate(\r\n        this.thePageNumber - 1,\r\n        this.thePageSize,\r\n        this.currentCategoryId\r\n      )\r\n      .subscribe(this.processResult());\r\n  }\r\n  processResult() {\r\n    return (data) => {\r\n      this.products = data._embedded.products;\r\n      this.thePageNumber = data.page.number + 1;\r\n      this.thePageSize = data.page.size;\r\n      this.theTotalElements = data.page.totalElements;\r\n    };\r\n  }\r\n\r\n  updatePageSize(pageSize: number) {\r\n    this.thePageSize = pageSize;\r\n    this.thePageNumber = 1;\r\n    this.listProducts();\r\n  }\r\n\r\n  addToCart(theProduct: Product) {\r\n    console.log(`Adding to cart: ${theProduct.name}, ${theProduct.unitPrice}`);\r\n\r\n    //TODO do the real work\r\n    const theCartItem = new CartItem(theProduct);\r\n\r\n    this.cartService.addToCart(theCartItem);\r\n  }\r\n}\r\n","<div class=\"main-content\">\r\n    <div class=\"section-content section-content-p30\">\r\n        <h4>Category: {{currentCategoryName}}</h4>\r\n        <hr>\r\n        <div class=\"container-fluid\">\r\n            <div class=\"row\">\r\n\r\n\r\n                <!--loop over the product list-->\r\n                <div *ngFor=\"let tempProduct of products\" class=\"col-md-3\">\r\n\r\n                    <div class=\"product-box\">\r\n                        <a routerLink = \"/products/{{ tempProduct.id }}\">\r\n                        <img src=\"{{ tempProduct.imageUrl }}\" class=\"img-responsive\">\r\n                        </a>\r\n\r\n                        <a routerLink = \"/products/{{ tempProduct.id }}\">\r\n                        <h1>{{tempProduct.name}}</h1>\r\n                        </a>\r\n\r\n                        <div class=\"price\">{{ tempProduct.unitPrice | currency: 'USD' }}</div>\r\n                        <button (click)=\"addToCart(tempProduct)\" class=\"btn btn-primary btn-sm\">Add to cart</button>\r\n                    </div>\r\n\r\n                </div>\r\n\r\n                <!--if products is empty then display a message-->\r\n                <div *ngIf=\"products?.length == 0\" class = \"alert alert-warning col-md-12\" role =\"alert\">\r\n                    No products found.\r\n                </div>\r\n\r\n            </div>\r\n\r\n            <!-- begin footer -->\r\n            <div class=\"footer-pagination\">\r\n                <div class=\"row\">\r\n                    <div class=\"col-md-6\"></div>\r\n                    <div class=\"col-md-6\">\r\n                        <div class=\"row\">\r\n                            <div class=\"col-md-9\" style=\"padding: left 30px;\">\r\n                                <ngb-pagination [(page)] = \"thePageNumber\"\r\n                                                [pageSize] = \"thePageSize\"\r\n                                                [collectionSize] = \"theTotalElements\"\r\n                                                [maxSize] = \"5\"\r\n                                                [boundaryLinks]=\"true\"\r\n                                                (pageChange) = \"listProducts()\">\r\n\r\n                                </ngb-pagination>\r\n                            </div>\r\n\r\n                            <div class=\"col-md-3 mt-2\" style=\"text-align: right;\">\r\n                                <span class=\"mr-2\">Page Size</span>\r\n                                \r\n                                <select (change)= \"updatePageSize($event.target.value)\">\r\n                                    <option>2</option>\r\n                                    <option selected=\"true\">5</option>\r\n                                    <option>10</option>\r\n                                    <option>20</option>\r\n                                    <option>50</option>\r\n                                </select>\r\n                            </div>\r\n\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <!-- end footer -->\r\n        </div>\r\n    </div>\r\n</div>","import { Injectable } from '@angular/core';\r\nimport { CartItem } from '../common/cart-item';\r\nimport { BehaviorSubject, Subject } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CartService {\r\n\r\n  cartItems: CartItem[] = [];\r\n\r\n  totalPrice: Subject<number> = new BehaviorSubject<number>(0);\r\n  totalQuantity: Subject<number> = new BehaviorSubject<number>(0);\r\n\r\n  storage: Storage = sessionStorage;\r\n  // storage: Storage = localStorage;\r\n\r\n  constructor() { \r\n\r\n      // read data from storage\r\n      let data = JSON.parse(this.storage.getItem('cartItems'));\r\n\r\n      if (data != null) {\r\n        this.cartItems = data;\r\n        \r\n        // compute totals based on the data that is read from storage\r\n        this.computeCartTotals();\r\n      }\r\n\r\n  }\r\n\r\n  addToCart(theCartItem: CartItem) {\r\n\r\n    // check if we already have the item in our cart\r\n    let alreadyExistsInCart: boolean = false;\r\n    let existingCartItem: CartItem = undefined;\r\n\r\n    if (this.cartItems.length > 0) {\r\n      // find the item in the cart based on item id\r\n\r\n      existingCartItem = this.cartItems.find( tempCartItem => tempCartItem.id === theCartItem.id );\r\n\r\n      // check if we found it\r\n      alreadyExistsInCart = (existingCartItem != undefined);\r\n    }\r\n\r\n    if (alreadyExistsInCart) {\r\n      // increment the quantity\r\n      existingCartItem.quantity++;\r\n    }\r\n    else {\r\n      // just add the item to the array\r\n      this.cartItems.push(theCartItem);\r\n    }\r\n\r\n    // compute cart total price and total quantity\r\n    this.computeCartTotals();\r\n  }\r\n\r\n  computeCartTotals() {\r\n\r\n    let totalPriceValue: number = 0;\r\n    let totalQuantityValue: number = 0;\r\n\r\n    for (let currentCartItem of this.cartItems) {\r\n      totalPriceValue += currentCartItem.quantity * currentCartItem.unitPrice;\r\n      totalQuantityValue += currentCartItem.quantity;\r\n    }\r\n\r\n    // publish the new values ... all subscribers will receive the new data\r\n    this.totalPrice.next(totalPriceValue);\r\n    this.totalQuantity.next(totalQuantityValue);\r\n\r\n    // log cart data just for debugging purposes\r\n    this.logCartData(totalPriceValue, totalQuantityValue);\r\n\r\n    // persist cart data\r\n    this.persistCartItems();\r\n  }\r\n\r\n  persistCartItems() {\r\n    this.storage.setItem('cartItems', JSON.stringify(this.cartItems));\r\n  }\r\n\r\n  logCartData(totalPriceValue: number, totalQuantityValue: number) {\r\n\r\n    console.log('Contents of the cart');\r\n    for (let tempCartItem of this.cartItems) {\r\n      const subTotalPrice = tempCartItem.quantity * tempCartItem.unitPrice;\r\n      console.log(`name: ${tempCartItem.name}, quantity=${tempCartItem.quantity}, unitPrice=${tempCartItem.unitPrice}, subTotalPrice=${subTotalPrice}`);\r\n    }\r\n\r\n    console.log(`totalPrice: ${totalPriceValue.toFixed(2)}, totalQuantity: ${totalQuantityValue}`);\r\n    console.log('----');\r\n  }\r\n\r\n  decrementQuantity(theCartItem: CartItem) {\r\n\r\n    theCartItem.quantity--;\r\n\r\n    if (theCartItem.quantity === 0) {\r\n      this.remove(theCartItem);\r\n    }\r\n    else {\r\n      this.computeCartTotals();\r\n    }\r\n  }\r\n\r\n  remove(theCartItem: CartItem) {\r\n\r\n    // get index of item in the array\r\n    const itemIndex = this.cartItems.findIndex( tempCartItem => tempCartItem.id === theCartItem.id );\r\n\r\n    // if found, remove the item from the array at the given index\r\n    if (itemIndex > -1) {\r\n      this.cartItems.splice(itemIndex, 1);\r\n\r\n      this.computeCartTotals();\r\n    }\r\n  }\r\n\r\n}\r\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport { EmailInfo } from '../common/email-info';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class EmailService {\n\n  private emailUrl = environment.backendApi + '/sendMail';\n\n  constructor(private httpClient: HttpClient) { }\n\n  sendMail(details: EmailInfo):Promise<any>{\n    return this.httpClient.post(this.emailUrl, details, {responseType: 'text'}).toPromise();\n  }\n}\n","<div class=\"main-content\">\r\n\r\n    <div class=\"section-content section-content-p30\">\r\n        <div class=\"container-fluid\">\r\n            <h3>Your Orders</h3>\r\n\r\n            <div *ngIf = \"orderHistoryList.length > 0\">\r\n                <table class=\"table table-bordered\">\r\n                    <tr>\r\n                        <th width = \"20%\">Order Tracking Number</th>\r\n                        <th width = \"10%\">Total Price</th>\r\n                        <th width = \"10%\">Total Quantity</th>\r\n                        <th width = \"10%\">Date</th>\r\n                    </tr>\r\n\r\n                    <tr *ngFor = \"let tempOrderHistory of orderHistoryList\">\r\n                        <td>\r\n                            {{ tempOrderHistory.orderTrackingNumber}}\r\n                        </td>\r\n\r\n                        <td>\r\n                            {{ tempOrderHistory.totalPrice | currency: 'USD'}}\r\n                        </td>\r\n\r\n                        <td>\r\n                            {{ tempOrderHistory.totalQuantity}}\r\n                        </td>\r\n\r\n                        <td>\r\n                            {{ tempOrderHistory.dateCreated | date: 'medium'}}\r\n                        </td>\r\n                    </tr>\r\n\r\n                </table>\r\n            </div>\r\n\r\n            <!--if order history is empty then display a message-->\r\n            <div *ngIf = \"orderHistoryList.length == 0\" class=\"alert alert-warning col-md-12\" role=\"alert\">\r\n                No orders found.\r\n            </div>\r\n\r\n        </div>\r\n\r\n    </div>\r\n</div>","import { Component, OnInit } from '@angular/core';\r\nimport { OrderHistory } from 'src/app/common/order-history';\r\nimport { OrderHistoryService } from 'src/app/services/order-history.service';\r\n\r\n@Component({\r\n  selector: 'app-order-history',\r\n  templateUrl: './order-history.component.html',\r\n  styleUrls: ['./order-history.component.css']\r\n})\r\nexport class OrderHistoryComponent implements OnInit {\r\n\r\n  orderHistoryList: OrderHistory[] = [];\r\n  storage: Storage = sessionStorage;\r\n  \r\n  constructor(private orderHistoryService: OrderHistoryService) { }\r\n\r\n  ngOnInit(): void {\r\n    this.handleOrderHistory();\r\n  }\r\n\r\n  handleOrderHistory() {\r\n   \r\n    //read the user's email address from the browser storage\r\n    const theEmail = JSON.parse(this.storage.getItem('userEmail'));\r\n\r\n    //retrieve data from the service\r\n    this.orderHistoryService.getOrderHistory(theEmail).subscribe(\r\n      data => {\r\n        this.orderHistoryList = data._embedded.orders;\r\n      }\r\n    );\r\n  }\r\n\r\n}\r\n","export default {\r\n\r\n    oidc: {\r\n        clientId: '0oai2dzwta1JeNeoV5d7',\r\n        issuer: 'https://dev-83258750.okta.com/oauth2/default',\r\n        redirectUri: 'https://localhost:4200/login/callback',\r\n        scopes: ['openid', 'profile', 'email']\r\n    }\r\n}\r\n","import { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { OktaAuthService } from '@okta/okta-angular';\r\nimport { from, Observable } from 'rxjs';\r\nimport { environment } from 'src/environments/environment';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthInterceptorService implements HttpInterceptor {\r\n\r\n  constructor(private oktaAuth: OktaAuthService) { }\r\n\r\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n    return from(this.handleAccess(request, next));\r\n  }\r\n\r\n  private async handleAccess(request: HttpRequest<any>, next: HttpHandler): Promise<HttpEvent<any>> { \r\n\r\n    // Only add an access token for secured endpoints\r\n    const theEndpoint =  environment.backendApi + '/orders';\r\n    const securedEndpoints = [theEndpoint];\r\n    // const securedEndpoints = ['https://ecommerce-backend-deploy.herokuapp.com/api/orders'];\r\n\r\n    if (securedEndpoints.some(url => request.urlWithParams.includes(url))) {\r\n\r\n      // get access token\r\n      const accessToken = await this.oktaAuth.getAccessToken();\r\n\r\n      // clone the request and add new header with access token\r\n      request = request.clone({\r\n        setHeaders: {\r\n          Authorization: 'Bearer ' + accessToken,\r\n        }\r\n      });\r\n\r\n    }\r\n\r\n    return next.handle(request).toPromise();\r\n  }\r\n}\r\n","export class EmailInfo {\n    firstName: string;\n    lastName: string;\n    amount: number;\n    trackingNo: string;\n    recipient: string;\n}\n","<div class=\"login-status-header\">\r\n\r\n    <div *ngIf = \"isAuthenticated && userFullName\" class=\"login-status-user-info\">\r\n        Welcome Back {{ userFullName }}!\r\n    </div>\r\n\r\n    <button *ngIf = \"!isAuthenticated\" routerLink = \"/login\" class=\"security-btn\">Login</button>\r\n\r\n    <button *ngIf = \"isAuthenticated\" (click) = \"logout()\" class=\"security-btn\">Logout</button>\r\n\r\n    <button *ngIf = \"isAuthenticated\" routerLink = \"/members\" class=\"security-btn ml-1\">Member</button>\r\n\r\n    <button *ngIf = \"isAuthenticated\" routerLink = \"/order-history\" class=\"security-btn ml-1\">Orders</button>\r\n\r\n</div>","import { Component, OnInit } from '@angular/core';\r\nimport { OktaAuthService } from '@okta/okta-angular';\r\n\r\n@Component({\r\n  selector: 'app-login-status',\r\n  templateUrl: './login-status.component.html',\r\n  styleUrls: ['./login-status.component.css']\r\n})\r\nexport class LoginStatusComponent implements OnInit {\r\n\r\n  isAuthenticated: boolean = false;\r\n  userFullName: string;\r\n\r\n  storage: Storage = sessionStorage;\r\n\r\n  constructor(private oktaAuthService: OktaAuthService) { }\r\n\r\n  ngOnInit(): void {\r\n\r\n    //Subscribe to authentication state changes\r\n    this.oktaAuthService.$authenticationState.subscribe(\r\n      (result) => {\r\n        this.isAuthenticated = result;\r\n        this.getUserDetails();\r\n      }\r\n    );\r\n  }\r\n\r\n  getUserDetails() {\r\n    if (this.isAuthenticated){\r\n\r\n      //Fetch the logged in user details (user's claims)\r\n      //\r\n      //user full name is exposed as a property name\r\n      this.oktaAuthService.getUser().then(\r\n        (res) => {\r\n          this.userFullName = res.name;\r\n\r\n          //retrieve the user's email from authenticated response\r\n          const theEmail = res.email;\r\n\r\n          //now store the email in browser storage\r\n          this.storage.setItem('userEmail', JSON.stringify(theEmail));\r\n        }\r\n      );\r\n    }\r\n  }\r\n\r\n  logout(){\r\n    //Terminate the session with Okta and removes current token\r\n    this.oktaAuthService.signOut();\r\n  }\r\n}\r\n","import { FormControl, ValidationErrors } from \"@angular/forms\";\r\n\r\nexport class Luv2ShopValidators {\r\n\r\n    //whitespace validation\r\n    static notOnlyWhitespace(control: FormControl): ValidationErrors{\r\n        \r\n        //check if string  only contains whitespaces\r\n        if((control.value != null) && (control.value.trim().length===0)){\r\n\r\n            //invalid return error object\r\n            return {'notOnlyWhitespace': true};\r\n        }\r\n        else{\r\n             //valid, return null\r\n        return null;\r\n        }\r\n    }\r\n}\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}